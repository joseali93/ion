{"version":3,"file":"core.umd.min.js","sources":["../../../es5/core/src/component/dynamic-form-control.component.ts","../../../es5/core/src/component/dynamic-form-array.component.ts","../../../es5/core/src/component/dynamic-form-control.event.ts","../../../es5/core/src/component/dynamic-form-component.ts","../../../../node_modules/tslib/tslib.es6.js","../../../../node_modules/rxjs/src/internal/config.ts","../../../../node_modules/rxjs/src/internal/Observer.ts","../../../../node_modules/rxjs/src/internal/util/isObject.ts","../../../../node_modules/rxjs/src/internal/util/tryCatch.ts","../../../../node_modules/rxjs/src/internal/util/UnsubscriptionError.ts","../../../../node_modules/rxjs/src/internal/Subscription.ts","../../../../node_modules/rxjs/src/internal/symbol/rxSubscriber.ts","../../../../node_modules/rxjs/src/internal/Subscriber.ts","../../../../node_modules/rxjs/src/internal/Observable.ts","../../../../node_modules/rxjs/src/internal/util/toSubscriber.ts","../../../../node_modules/rxjs/src/internal/util/pipe.ts","../../../../node_modules/rxjs/src/internal/util/ObjectUnsubscribedError.ts","../../../../node_modules/rxjs/src/internal/SubjectSubscription.ts","../../../../node_modules/rxjs/src/internal/Subject.ts","../../../../node_modules/rxjs/src/internal/observable/empty.ts","../../../../node_modules/rxjs/src/internal/util/subscribeToArray.ts","../../../../node_modules/rxjs/src/internal/observable/fromArray.ts","../../../../node_modules/rxjs/src/internal/observable/of.ts","../../../../node_modules/rxjs/src/internal/observable/scalar.ts","../../../../node_modules/rxjs/src/internal/operators/map.ts","../../../es5/core/src/decorator/serializable.decorator.ts","../../../es5/core/src/model/dynamic-form-control.model.ts","../../../es5/core/src/model/dynamic-form-value-control.model.ts","../../../es5/core/src/model/form-array/dynamic-form-array.model.ts","../../../es5/core/src/model/dynamic-check-control.model.ts","../../../es5/core/src/model/checkbox/dynamic-checkbox.model.ts","../../../es5/core/src/utils/autofill.utils.ts","../../../es5/core/src/model/dynamic-input-control.model.ts","../../../es5/core/src/utils/json.utils.ts","../../../es5/core/src/model/input/dynamic-input.model.ts","../../../es5/core/src/utils/relation.utils.ts","../../../es5/core/src/model/misc/dynamic-form-control-relation.model.ts","../../../es5/core/src/component/dynamic-form-control-container.component.ts","../../../es5/core/src/component/dynamic-templateable-form-control.component.ts","../../../es5/core/src/directive/dynamic-template.directive.ts","../../../es5/core/src/directive/dynamic-id.directive.ts","../../../es5/core/src/model/dynamic-date-control.model.ts","../../../es5/core/src/model/dynamic-file-control.model.ts","../../../es5/core/src/model/dynamic-option-control.model.ts","../../../es5/core/src/model/form-group/dynamic-form-group.model.ts","../../../es5/core/src/model/checkbox/dynamic-checkbox-group.model.ts","../../../es5/core/src/model/colorpicker/dynamic-colorpicker.model.ts","../../../es5/core/src/model/datepicker/dynamic-datepicker.model.ts","../../../es5/core/src/model/editor/dynamic-editor.model.ts","../../../es5/core/src/model/file-upload/dynamic-file-upload.model.ts","../../../es5/core/src/model/radio/dynamic-radio-group.model.ts","../../../es5/core/src/model/rating/dynamic-rating.model.ts","../../../es5/core/src/model/select/dynamic-select.model.ts","../../../es5/core/src/model/slider/dynamic-slider.model.ts","../../../es5/core/src/model/switch/dynamic-switch.model.ts","../../../es5/core/src/model/textarea/dynamic-textarea.model.ts","../../../es5/core/src/model/timepicker/dynamic-timepicker.model.ts","../../../es5/core/src/service/dynamic-form-validation.service.ts","../../../es5/core/src/service/dynamic-form.service.ts","../../../es5/core/src/service/dynamic-form-layout.service.ts","../../../es5/core/src/core.module.ts"],"sourcesContent":["import { EventEmitter } from \"@angular/core\";\nimport { FormControl, FormGroup } from \"@angular/forms\";\nimport { DynamicFormControl } from \"./dynamic-form-control.interface\";\nimport { DynamicFormControlCustomEvent } from \"./dynamic-form-control.event\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport { DynamicCheckboxModel } from \"../model/checkbox/dynamic-checkbox.model\";\nimport {\n    DynamicFormControlLayout,\n    DynamicFormControlLayoutContext,\n    DynamicFormControlLayoutPlace\n} from \"../model/misc/dynamic-form-control-layout.model\";\nimport { DynamicFormValidationService } from \"../service/dynamic-form-validation.service\";\nimport {\n    DynamicFormLayout,\n    DynamicFormLayoutService,\n    DynamicFormControlTemplates\n} from \"../service/dynamic-form-layout.service\";\n\nexport abstract class DynamicFormControlComponent implements DynamicFormControl {\n\n    private _hasFocus: boolean = false;\n\n    bindId: boolean;\n    group: FormGroup;\n    layout: DynamicFormLayout;\n    model: DynamicFormControlModel;\n    templates: DynamicFormControlTemplates;\n\n    blur: EventEmitter<any>;\n    change: EventEmitter<any>;\n    customEvent: EventEmitter<DynamicFormControlCustomEvent> | undefined;\n    focus: EventEmitter<any>;\n\n    protected constructor(protected layoutService: DynamicFormLayoutService,\n                          protected validationService: DynamicFormValidationService) {}\n\n    get control(): FormControl {\n        return this.group.get(this.model.id) as FormControl;\n    }\n\n    get errorMessages(): string[] {\n        return this.validationService.createErrorMessages(this.control, this.model);\n    }\n\n    get hasFocus(): boolean {\n        return this._hasFocus;\n    }\n\n    get isInvalid(): boolean {\n        return this.control.invalid;\n    }\n\n    get isValid(): boolean {\n        return this.control.valid;\n    }\n\n    get showErrorMessages(): boolean {\n        return this.model.hasErrorMessages && this.control.touched && !this.hasFocus && this.isInvalid;\n    }\n\n    getClass(context: DynamicFormControlLayoutContext, place: DynamicFormControlLayoutPlace, model: DynamicFormControlModel = this.model): string {\n\n        let controlLayout = (this.layout && this.layout[model.id]) || model.layout as DynamicFormControlLayout;\n\n        return this.layoutService.getClass(controlLayout, context, place);\n    }\n\n    onBlur($event: any) {\n\n        if ($event instanceof Event) {\n            $event.stopPropagation();\n        }\n\n        this._hasFocus = false;\n        this.blur.emit($event);\n    }\n\n    onChange($event: any) {\n\n        if ($event instanceof Event) {\n            $event.stopPropagation();\n        }\n\n        this.change.emit($event);\n    }\n\n    onEmbeddedCheckboxChange($event: Event, model: DynamicCheckboxModel) {\n\n        this.onChange($event);\n\n        model.valueUpdates.next(($event.target as HTMLInputElement).checked);\n    }\n\n    onCustomEvent($event: any, type: string | null = null, bypass: boolean = false) {\n\n        let emitter = this.customEvent as EventEmitter<DynamicFormControlCustomEvent>;\n\n        if (bypass) {\n\n            emitter.emit($event);\n\n        } else if (typeof type === \"string\") {\n\n            emitter.emit({customEvent: $event, customEventType: type});\n        }\n    }\n\n    onFocus($event: any) {\n\n        if ($event instanceof Event) {\n            $event.stopPropagation();\n        }\n\n        this._hasFocus = true;\n        this.focus.emit($event);\n    }\n}","import { QueryList } from \"@angular/core\";\nimport { DynamicFormControlComponent } from \"./dynamic-form-control.component\";\nimport { DynamicTemplateDirective } from \"../directive/dynamic-template.directive\";\nimport { DynamicFormArrayModel } from \"../model/form-array/dynamic-form-array.model\";\n\nexport abstract class DynamicFormArrayComponent extends DynamicFormControlComponent {\n\n    model: DynamicFormArrayModel;\n    templates: QueryList<DynamicTemplateDirective> | undefined;\n\n    get startTemplate(): DynamicTemplateDirective | undefined {\n        return this.layoutService.getStartTemplate(this.model, this.templates);\n    }\n\n    get endTemplate(): DynamicTemplateDirective | undefined {\n        return this.layoutService.getEndTemplate(this.model, this.templates);\n    }\n}","import { FormControl, FormGroup } from \"@angular/forms\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport { DynamicFormArrayGroupModel } from \"../model/form-array/dynamic-form-array.model\";\n\nexport enum DynamicFormControlEventType {Blur = \"blur\", Change = \"change\", Custom = \"custom\", Focus = \"focus\"}\n\nexport interface DynamicFormControlEvent {\n\n    $event: Event | FocusEvent | DynamicFormControlEvent | any;\n    context: DynamicFormArrayGroupModel | null;\n    control: FormControl;\n    group: FormGroup;\n    model: DynamicFormControlModel;\n    type: string;\n}\n\nexport interface DynamicFormControlCustomEvent {\n\n    customEvent: any;\n    customEventType: string;\n}\n\nexport function isDynamicFormControlEvent($event: any): $event is DynamicFormControlEvent {\n    return $event !== null && typeof $event === \"object\" && $event.hasOwnProperty(\"$event\");\n}","import { EventEmitter, QueryList } from \"@angular/core\";\nimport { FormGroup } from \"@angular/forms\";\nimport { DynamicFormControlContainerComponent } from \"./dynamic-form-control-container.component\";\nimport { DynamicFormControlEvent, DynamicFormControlEventType } from \"./dynamic-form-control.event\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport {\n    DynamicFormControlLayout,\n    DynamicFormControlLayoutContext,\n    DynamicFormControlLayoutPlace\n} from \"../model/misc/dynamic-form-control-layout.model\";\nimport { DynamicTemplateDirective } from \"../directive/dynamic-template.directive\";\nimport { DynamicFormService } from \"../service/dynamic-form.service\";\nimport { DynamicFormLayout, DynamicFormLayoutService } from \"../service/dynamic-form-layout.service\";\n\nexport abstract class DynamicFormComponent {\n\n    formGroup: FormGroup;\n    formModel: DynamicFormControlModel[];\n    formLayout: DynamicFormLayout;\n\n    components: QueryList<DynamicFormControlContainerComponent>;\n    templates: QueryList<DynamicTemplateDirective>;\n\n    blur: EventEmitter<DynamicFormControlEvent>;\n    change: EventEmitter<DynamicFormControlEvent>;\n    focus: EventEmitter<DynamicFormControlEvent>;\n    customEvent: EventEmitter<DynamicFormControlEvent>;\n\n    protected constructor(protected formService: DynamicFormService, protected layoutService: DynamicFormLayoutService) {}\n\n    trackByFn(_index: number, model: DynamicFormControlModel): string {\n        return model.id;\n    }\n\n    getClass(model: DynamicFormControlModel, context: DynamicFormControlLayoutContext, place: DynamicFormControlLayoutPlace): string {\n\n        let controlLayout = this.layoutService.findById(model.id, this.formLayout) || model.layout as DynamicFormControlLayout;\n\n        return this.layoutService.getClass(controlLayout, context, place);\n    }\n\n    onEvent($event: DynamicFormControlEvent, type: string) {\n\n        switch (type) {\n\n            case DynamicFormControlEventType.Blur:\n                this.blur.emit($event);\n                break;\n\n            case DynamicFormControlEventType.Change:\n                this.change.emit($event);\n                break;\n\n            case DynamicFormControlEventType.Focus:\n                this.focus.emit($event);\n                break;\n\n            case DynamicFormControlEventType.Custom:\n                this.customEvent.emit($event);\n                break;\n        }\n    }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","let _enable_super_gross_mode_that_will_cause_bad_things = false;\n\n/**\n * The global configuration object for RxJS, used to configure things\n * like what Promise contructor should used to create Promises\n */\nexport const config = {\n  /**\n   * The promise constructor used by default for methods such as\n   * {@link toPromise} and {@link forEach}\n   */\n  Promise: undefined as PromiseConstructorLike,\n\n  /**\n   * If true, turns on synchronous error rethrowing, which is a deprecated behavior\n   * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe\n   * call in a try/catch block. It also enables producer interference, a nasty bug\n   * where a multicast can be broken for all observers by a downstream consumer with\n   * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BY TIME\n   * FOR MIGRATION REASONS.\n   */\n  set useDeprecatedSynchronousErrorHandling(value: boolean) {\n    if (value) {\n      const error = new Error();\n      console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \\n' + error.stack);\n    } else if (_enable_super_gross_mode_that_will_cause_bad_things) {\n      console.log('RxJS: Back to a better error behavior. Thank you. <3');\n    }\n    _enable_super_gross_mode_that_will_cause_bad_things = value;\n  },\n\n  get useDeprecatedSynchronousErrorHandling() {\n    return _enable_super_gross_mode_that_will_cause_bad_things;\n  },\n};\n","import { Observer } from './types';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void {\n    if (config.useDeprecatedSynchronousErrorHandling) {\n      throw err;\n    } else {\n      hostReportError(err);\n    }\n  },\n  complete(): void { /*noop*/ }\n};\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n}\n","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n\n  public readonly name = 'UnsubscriptionError';\n\n  constructor(public errors: any[]) {\n    super(errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (Object as any).setPrototypeOf(this, UnsubscriptionError.prototype);\n  }\n}\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { SubscriptionLike, TeardownLogic } from './types';\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements SubscriptionLike {\n  /** @nocollapse */\n  public static EMPTY: Subscription = (function(empty: any) {\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  /** @internal */\n  protected _parent: Subscription = null;\n  /** @internal */\n  protected _parents: Subscription[] = null;\n  /** @internal */\n  private _subscriptions: SubscriptionLike[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  /** @internal */\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","export const rxSubscriber =\n  (typeof Symbol === 'function' && typeof Symbol.for === 'function')\n    ? Symbol.for('rxSubscriber')\n    : '@@rxSubscriber';\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Observer, PartialObserver } from './types';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   * @nocollapse\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  /** @internal */ syncErrorValue: any = null;\n  /** @internal */ syncErrorThrown: boolean = false;\n  /** @internal */ syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          // HACK(benlesh): For situations where Node has multiple copies of rxjs in\n          // node_modules, we cannot rely on `instanceof` checks\n          if (isTrustedSubscriber(destinationOrNext)) {\n            const trustedSubscriber = destinationOrNext[rxSubscriberSymbol]() as Subscriber<any>;\n            this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;\n            this.destination = trustedSubscriber;\n            trustedSubscriber.add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      const { useDeprecatedSynchronousErrorHandling } = config;\n      if (this._error) {\n        if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        if (useDeprecatedSynchronousErrorHandling) {\n          throw err;\n        }\n        hostReportError(err);\n      } else {\n        if (useDeprecatedSynchronousErrorHandling) {\n          _parentSubscriber.syncErrorValue = err;\n          _parentSubscriber.syncErrorThrown = true;\n        } else {\n          hostReportError(err);\n        }\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        throw err;\n      } else {\n        hostReportError(err);\n      }\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    if (!config.useDeprecatedSynchronousErrorHandling) {\n      throw new Error('bad call');\n    }\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        parent.syncErrorValue = err;\n        parent.syncErrorThrown = true;\n        return true;\n      } else {\n        hostReportError(err);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n\nfunction isTrustedSubscriber(obj: any) {\n  return obj instanceof Subscriber || ('syncErrorThrowable' in obj && obj[rxSubscriberSymbol]);\n}\n","import { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { TeardownLogic, OperatorFunction, PartialObserver, Subscribable } from './types';\nimport { toSubscriber } from './util/toSubscriber';\nimport { iif } from './observable/iif';\nimport { throwError } from './observable/throwError';\nimport { observable as Symbol_observable } from '../internal/symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  /** Internal implementation detail, do not use directly. */\n  public _isScalar: boolean = false;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  source: Observable<any>;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   * @nocollapse\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observer?: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n   * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n   * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n   * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n   *\n   * ## Example\n   * ### Subscribe with an Observer\n   * ```javascript\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   * ```\n   *\n   * ### Subscribe with functions\n   * ```javascript\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   * ```\n   *\n   * ### Cancel a subscription\n   * ```javascript\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   * ```\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(\n        this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?\n        this._subscribe(sink) :\n        this._trySubscribe(sink)\n      );\n    }\n\n    if (config.useDeprecatedSynchronousErrorHandling) {\n      if (sink.syncErrorThrowable) {\n        sink.syncErrorThrowable = false;\n        if (sink.syncErrorThrown) {\n          throw sink.syncErrorValue;\n        }\n      }\n    }\n\n    return sink;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        sink.syncErrorThrown = true;\n        sink.syncErrorValue = err;\n      }\n      sink.error(err);\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [promiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, promiseCtor?: PromiseConstructorLike): Promise<void> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        try {\n          next(value);\n        } catch (err) {\n          reject(err);\n          if (subscription) {\n            subscription.unsubscribe();\n          }\n        }\n      }, reject, resolve);\n    }) as Promise<void>;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    const { source } = this;\n    return source && source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words. Deprecated in\n  // favor of iif and throwError functions.\n  /**\n   * @nocollapse\n   * @deprecated In favor of iif creation function: import { iif } from 'rxjs';\n   */\n  static if: typeof iif;\n  /**\n   * @nocollapse\n   * @deprecated In favor of throwError creation function: import { throwError } from 'rxjs';\n   */\n  static throw: typeof throwError;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>;\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>;\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>;\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>;\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>;\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>;\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>;\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>;\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>;\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>;\n  pipe<R>(...operations: OperatorFunction<any, any>[]): Observable<R>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * ### Example\n   * ```javascript\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   * ```\n   */\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(promiseCtor?: PromiseConstructorLike): Promise<T> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n\n/**\n * Decides between a passed promise constructor from consuming code,\n * A default configured promise constructor, and the native promise\n * constructor and returns it. If nothing can be found, it will throw\n * an error.\n * @param promiseCtor The optional promise constructor to passed by consuming code\n */\nfunction getPromiseCtor(promiseCtor: PromiseConstructorLike | undefined) {\n  if (!promiseCtor) {\n    promiseCtor = config.Promise || Promise;\n  }\n\n  if (!promiseCtor) {\n    throw new Error('no Promise impl found');\n  }\n\n  return promiseCtor;\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { empty as emptyObserver } from '../Observer';\nimport { PartialObserver } from '../types';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { noop } from './noop';\nimport { UnaryFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(op1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>, op9: UnaryFunction<H, I>): UnaryFunction<T, I>;\n/* tslint:enable:max-line-length */\n\nexport function pipe<T, R>(...fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  return pipeFromArray(fns);\n}\n\n/* @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (!fns) {\n    return noop as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input as any);\n  };\n}\n","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n\n  public readonly name = 'ObjectUnsubscribedError';\n\n  constructor() {\n    super('object unsubscribed');\n    (Object as any).setPrototypeOf(this, ObjectUnsubscribedError.prototype);\n  }\n}\n","import { Subject } from './Subject';\nimport { Observer } from './types';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { Observer, SubscriptionLike, TeardownLogic } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements SubscriptionLike {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  /**@nocollapse */\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\n\n/**\n * The same Observable instance returned by any call to {@link empty} without a\n * {@link Scheduler}. It is preferrable to use this over `empty()`.\n */\nexport const EMPTY = new Observable<never>(subscriber => subscriber.complete());\n\n/**\n * Creates an Observable that emits no items to the Observer and immediately\n * emits a complete notification.\n *\n * <span class=\"informal\">Just emits 'complete', and nothing else.\n * </span>\n *\n * <img src=\"./img/empty.png\" width=\"100%\">\n *\n * This static operator is useful for creating a simple Observable that only\n * emits the complete notification. It can be used for composing with other\n * Observables, such as in a {@link mergeMap}.\n *\n * ## Examples\n * ### Emit the number 7, then complete\n * ```javascript\n * const result = empty().pipe(startWith(7));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * ### Map and flatten only odd numbers to the sequence 'a', 'b', 'c'\n * ```javascript\n * const interval$ = interval(1000);\n * result = interval$.pipe(\n *   mergeMap(x => x % 2 === 1 ? of('a', 'b', 'c') : empty()),\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following to the console:\n * // x is equal to the count on the interval eg(0,1,2,3,...)\n * // x will occur every 1000ms\n * // if x % 2 is equal to 1 print abc\n * // if x % 2 is not equal to 1 nothing will be output\n * ```\n *\n * @see {@link create}\n * @see {@link never}\n * @see {@link of}\n * @see {@link throw}\n *\n * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n * the emission of the complete notification.\n * @return {Observable} An \"empty\" Observable: emits only the complete\n * notification.\n * @static true\n * @name empty\n * @owner Observable\n * @deprecated Deprecated in favor of using EMPTY constant.\n */\nexport function empty(scheduler?: SchedulerLike) {\n  return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\n\nexport function emptyScheduled(scheduler: SchedulerLike) {\n  return new Observable<never>(subscriber => scheduler.schedule(() => subscriber.complete()));\n}\n","import { Subscriber } from '../Subscriber';\n\n/**\n * Subscribes to an ArrayLike with a subscriber\n * @param array The array or array-like to subscribe to\n */\nexport const subscribeToArray = <T>(array: ArrayLike<T>) => (subscriber: Subscriber<T>) => {\n  for (let i = 0, len = array.length; i < len && !subscriber.closed; i++) {\n    subscriber.next(array[i]);\n  }\n  if (!subscriber.closed) {\n    subscriber.complete();\n  }\n};\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscription } from '../Subscription';\nimport { subscribeToArray } from '../util/subscribeToArray';\n\nexport function fromArray<T>(input: ArrayLike<T>, scheduler?: SchedulerLike) {\n  if (!scheduler) {\n    return new Observable<T>(subscribeToArray(input));\n  } else {\n    return new Observable<T>(subscriber => {\n      const sub = new Subscription();\n      let i = 0;\n      sub.add(scheduler.schedule(function () {\n        if (i === input.length) {\n          subscriber.complete();\n          return;\n        }\n        subscriber.next(input[i++]);\n        if (!subscriber.closed) {\n          sub.add(this.schedule());\n        }\n      }));\n      return sub;\n    });\n  }\n}\n","import { SchedulerLike } from '../types';\nimport { isScheduler } from '../util/isScheduler';\nimport { fromArray } from './fromArray';\nimport { empty } from './empty';\nimport { scalar } from './scalar';\nimport { Observable } from '../Observable';\n\nexport function of<T>(a: T, scheduler?: SchedulerLike): Observable<T>;\nexport function of<T, T2>(a: T, b: T2, scheduler?: SchedulerLike): Observable<T | T2>;\nexport function of<T, T2, T3>(a: T, b: T2, c: T3, scheduler?: SchedulerLike): Observable<T | T2 | T3>;\nexport function of<T, T2, T3, T4>(a: T, b: T2, c: T3, d: T4, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4>;\nexport function of<T, T2, T3, T4, T5>(a: T, b: T2, c: T3, d: T4, e: T5, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5>;\nexport function of<T, T2, T3, T4, T5, T6>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function of<T, T2, T3, T4, T5, T6, T7>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, scheduler?: SchedulerLike):\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7>;\nexport function of<T, T2, T3, T4, T5, T6, T7, T8>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, h: T8, scheduler?: SchedulerLike):\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7 | T8>;\nexport function of<T, T2, T3, T4, T5, T6, T7, T8, T9>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, h: T8, i: T9, scheduler?: SchedulerLike):\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9>;\nexport function of<T>(...args: Array<T | SchedulerLike>): Observable<T>;\nexport function of<T>(...args: Array<T | SchedulerLike>): Observable<T> {\n  let scheduler = args[args.length - 1] as SchedulerLike;\n  if (isScheduler(scheduler)) {\n    args.pop();\n  } else {\n    scheduler = undefined;\n  }\n  switch (args.length) {\n    case 0:\n      return empty(scheduler);\n    case 1:\n      return scheduler ? fromArray(args as T[], scheduler) : scalar(args[0] as T);\n    default:\n      return fromArray(args as T[], scheduler);\n  }\n}\n","import { Observable } from '../Observable';\n\nexport function scalar<T>(value: T) {\n  const result = new Observable<T>(subscriber => {\n    subscriber.next(value);\n    subscriber.complete();\n  });\n  result._isScalar = true;\n  (result as any).value = value;\n  return result;\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * ## Example\n * Map every click to the clientX position of that click\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const positions = clicks.pipe(map(ev => ev.clientX));\n * positions.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return function mapOperation(source: Observable<T>): Observable<R> {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","declare let Reflect: any;\n\nexport const METADATA_KEY_SERIALIZABLE = \"SERIALIZABLE\";\n\nexport interface SerializableProperty {\n\n    key: string;\n    name: string;\n}\n\nexport function serializable(name?: string): (target: any, key: string) => void {\n\n    return function (target, key) {\n        Reflect.defineMetadata(METADATA_KEY_SERIALIZABLE, {key: key, name: name || key}, target, key);\n    };\n}\n\nexport function getSerializables(target: any): SerializableProperty[] {\n\n    let serializables = [];\n\n    for (let key in target) {\n\n        let metadata = Reflect.getMetadata(METADATA_KEY_SERIALIZABLE, target, key);\n\n        if (metadata) {\n            serializables.push(metadata);\n        }\n    }\n\n    return serializables;\n}\n\nexport function serialize(target: any, prototype?: any): Object {\n\n    return getSerializables(prototype || target).reduce((prev: any, prop: SerializableProperty) => {\n\n        prev[prop.name] = target[prop.key];\n\n        return prev;\n\n    }, {});\n}","import { FormHooks } from \"@angular/forms/src/model\";\nimport { Subject } from \"rxjs\";\nimport { DynamicFormControlLayout } from \"./misc/dynamic-form-control-layout.model\";\nimport { DynamicPathable } from \"./misc/dynamic-form-control-path.model\";\nimport { DynamicFormControlRelationGroup } from \"./misc/dynamic-form-control-relation.model\";\nimport { DynamicValidatorsConfig } from \"./misc/dynamic-form-control-validation.model\";\nimport { serializable, serialize } from \"../decorator/serializable.decorator\";\n\nexport interface DynamicFormControlModelConfig {\n\n    asyncValidators?: DynamicValidatorsConfig;\n    disabled?: boolean;\n    errorMessages?: DynamicValidatorsConfig;\n    hidden?: boolean;\n    id: string;\n    label?: string;\n    labelTooltip?: string;\n    controlTooltip?: string;\n    name?: string;\n    relation?: DynamicFormControlRelationGroup[];\n    updateOn?: FormHooks;\n    validators?: DynamicValidatorsConfig;\n}\n\nexport abstract class DynamicFormControlModel implements DynamicPathable {\n\n    @serializable() asyncValidators: DynamicValidatorsConfig | null;\n    @serializable(\"disabled\") _disabled: boolean;\n    disabledUpdates: Subject<boolean>;\n    @serializable() errorMessages: DynamicValidatorsConfig | null;\n    @serializable() hidden: boolean;\n    @serializable() id: string;\n    @serializable() label: string | null;\n    @serializable() labelTooltip: string | null;\n    @serializable() controlTooltip: string | null;\n    @serializable() layout: DynamicFormControlLayout | null;\n    @serializable() name: string;\n    parent: DynamicPathable | null = null;\n    @serializable() relation: DynamicFormControlRelationGroup[];\n    @serializable() updateOn: FormHooks | null;\n    @serializable() validators: DynamicValidatorsConfig | null;\n\n    abstract readonly type: string;\n\n    protected constructor(config: DynamicFormControlModelConfig, layout: DynamicFormControlLayout | null = null) {\n\n        this.asyncValidators = config.asyncValidators || null;\n        this.errorMessages = config.errorMessages || null;\n        this.hidden = typeof config.hidden === \"boolean\" ? config.hidden : false;\n        this.id = config.id;\n        this.label = config.label || null;\n        this.labelTooltip = config.labelTooltip || null;\n        this.controlTooltip = config.controlTooltip || null;\n        this.layout = layout;\n        this.name = config.name || config.id;\n        this.relation = Array.isArray(config.relation) ? config.relation : [];\n        this.updateOn = typeof config.updateOn === \"string\" ? config.updateOn : null;\n        this.validators = config.validators || null;\n\n        this.disabled = typeof config.disabled === \"boolean\" ? config.disabled : false;\n        this.disabledUpdates = new Subject<boolean>();\n        this.disabledUpdates.subscribe(disabled => this.disabled = disabled);\n    }\n\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = value;\n    }\n\n    get hasErrorMessages(): boolean {\n        return typeof this.errorMessages === \"object\" && this.errorMessages !== null;\n    }\n\n    toJSON() {\n        return serialize(this);\n    }\n}","import { Subject } from \"rxjs\";\nimport { DynamicFormControlModel, DynamicFormControlModelConfig } from \"./dynamic-form-control.model\";\nimport { DynamicFormControlLayout } from \"./misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../decorator/serializable.decorator\";\n\nexport interface DynamicFormValueControlModelConfig<T> extends DynamicFormControlModelConfig {\n\n    additional?: { [key: string]: any };\n    hint?: string;\n    required?: boolean;\n    tabIndex?: number;\n    value?: T;\n}\n\nexport abstract class DynamicFormValueControlModel<T> extends DynamicFormControlModel {\n\n    @serializable() additional: { [key: string]: any } | null;\n    @serializable() hint: string | null;\n    @serializable() required: boolean;\n    @serializable() tabIndex: number | null;\n    @serializable(\"value\") _value: T | null;\n    valueUpdates: Subject<T>;\n\n    protected constructor(config: DynamicFormValueControlModelConfig<T>, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.additional = typeof config.additional === \"object\" && config.additional !== null ? config.additional : null;\n        this.hint = config.hint || null;\n        this.required = typeof config.required === \"boolean\" ? config.required : false;\n        this.tabIndex = config.tabIndex || null;\n\n        this.value = config.value !== null && config.value !== undefined ? config.value : null;\n        this.valueUpdates = new Subject<T>();\n        this.valueUpdates.subscribe((value: T) => this.value = value);\n    }\n\n    set value(value: T | null) {\n        this._value = value;\n    }\n\n    get value(): T | null {\n        return this._value;\n    }\n\n    getAdditional(key: string, defaultValue: any = null): any {\n        return this.additional !== null && this.additional.hasOwnProperty(key) ? this.additional[key] : defaultValue;\n    }\n}","import { DynamicFormControlModel, DynamicFormControlModelConfig } from \"../dynamic-form-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { DynamicPathable } from \"../misc/dynamic-form-control-path.model\";\nimport { DynamicValidatorsConfig } from \"../misc/dynamic-form-control-validation.model\";\nimport { serializable, serialize } from \"../../decorator/serializable.decorator\";\n\nexport class DynamicFormArrayGroupModel implements DynamicPathable {\n\n    $implicit: DynamicFormArrayGroupModel;\n    context: DynamicFormArrayModel;\n    @serializable() group: DynamicFormControlModel[];\n    @serializable() index: number;\n\n    constructor(context: DynamicFormArrayModel, group: DynamicFormControlModel[] = [], index: number = -1) {\n\n        this.$implicit = this;\n        this.context = context;\n        this.group = group;\n        this.index = index;\n    }\n\n    get parent(): DynamicFormArrayModel {\n        return this.context;\n    }\n\n    get(index: number): DynamicFormControlModel {\n        return this.group[index];\n    }\n\n    toJSON() {\n        return serialize(this);\n    }\n}\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_ARRAY = \"ARRAY\";\n\nexport interface DynamicFormArrayModelConfig extends DynamicFormControlModelConfig {\n\n    groupAsyncValidators?: DynamicValidatorsConfig;\n    groupFactory?: () => DynamicFormControlModel[];\n    groupValidators?: DynamicValidatorsConfig;\n    groups?: DynamicFormArrayGroupModel[] | null;\n    initialCount?: number;\n}\n\nexport class DynamicFormArrayModel extends DynamicFormControlModel {\n\n    @serializable() groupAsyncValidators: DynamicValidatorsConfig | null;\n    groupFactory: () => DynamicFormControlModel[];\n    @serializable() groupValidators: DynamicValidatorsConfig | null;\n    @serializable() groups: DynamicFormArrayGroupModel[] = [];\n    @serializable() initialCount: number;\n\n    @serializable() readonly groupPrototype: DynamicFormControlModel[]; // only to recreate model from JSON\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_ARRAY;\n\n    constructor(config: DynamicFormArrayModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        if (typeof config.groupFactory === \"function\") {\n            this.groupFactory = config.groupFactory;\n        } else {\n            throw new Error(\"group factory function must be specified for DynamicFormArrayModel\");\n        }\n\n        this.groupAsyncValidators = config.groupAsyncValidators || null;\n        this.groupPrototype = this.groupFactory();\n        this.groupValidators = config.groupValidators || null;\n        this.initialCount = typeof config.initialCount === \"number\" ? config.initialCount : 1;\n\n        if (Array.isArray(config.groups)) {\n\n            config.groups.forEach((arrayGroup, index) => {\n                this.groups.push(new DynamicFormArrayGroupModel(this, arrayGroup.group, arrayGroup.index || index));\n            });\n\n        } else {\n\n            for (let index = 0; index < this.initialCount; index++) {\n                this.addGroup();\n            }\n        }\n    }\n\n    private updateGroupIndex(): void {\n        this.groups.forEach((group, index) => group.index = index);\n    }\n\n    get size(): number {\n        return this.groups.length;\n    }\n\n    get(index: number): DynamicFormArrayGroupModel {\n        return this.groups[index];\n    }\n\n    addGroup(): DynamicFormArrayGroupModel {\n        return this.insertGroup(this.groups.length);\n    }\n\n    insertGroup(index: number): DynamicFormArrayGroupModel {\n\n        let group = new DynamicFormArrayGroupModel(this, this.groupFactory());\n\n        this.groups.splice(index, 0, group);\n        this.updateGroupIndex();\n\n        return group;\n    }\n\n    moveGroup(index: number, step: number): void {\n\n        this.groups.splice(index + step, 0, ...this.groups.splice(index, 1));\n        this.updateGroupIndex();\n    }\n\n    removeGroup(index: number): void {\n\n        this.groups.splice(index, 1);\n        this.updateGroupIndex();\n    }\n}","import { DynamicFormValueControlModel, DynamicFormValueControlModelConfig } from \"./dynamic-form-value-control.model\";\nimport { DynamicFormControlLayout } from \"./misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../decorator/serializable.decorator\";\n\nexport interface DynamicCheckControlModelConfig extends DynamicFormValueControlModelConfig<boolean> {\n\n    labelPosition?: string;\n}\n\nexport abstract class DynamicCheckControlModel extends DynamicFormValueControlModel<boolean> {\n\n    @serializable() labelPosition: string | null;\n\n    protected constructor(config: DynamicCheckControlModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.labelPosition = config.labelPosition || null;\n        this.value = typeof this.value === \"boolean\" ? this.value : false;\n    }\n\n    get checked(): boolean {\n        return !!this.value;\n    }\n\n    set checked(checked: boolean) {\n        this.valueUpdates.next(checked);\n    }\n\n    toggle(): void {\n        this.checked = !this.checked;\n    }\n}","import { DynamicCheckControlModel, DynamicCheckControlModelConfig } from \"../dynamic-check-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX = \"CHECKBOX\";\n\nexport interface DynamicCheckboxModelConfig extends DynamicCheckControlModelConfig {\n\n    indeterminate?: boolean;\n}\n\nexport class DynamicCheckboxModel extends DynamicCheckControlModel {\n\n    @serializable() indeterminate: boolean;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX;\n\n    constructor(config: DynamicCheckboxModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.indeterminate = typeof config.indeterminate === \"boolean\" ? config.indeterminate : false;\n    }\n}","export const AUTOCOMPLETE_OFF = \"off\";\nexport const AUTOCOMPLETE_ON = \"on\";\n\nexport const AUTOFILL_TOKEN_BILLING = \"billing\";\nexport const AUTOFILL_TOKEN_SHIPPING = \"shipping\";\n\nexport const AUTOFILL_TOKENS_ADDRESS = [AUTOFILL_TOKEN_BILLING, AUTOFILL_TOKEN_SHIPPING];\n\nexport const AUTOFILL_TOKEN_HOME = \"home\";\nexport const AUTOFILL_TOKEN_WORK = \"work\";\nexport const AUTOFILL_TOKEN_MOBILE = \"mobile\";\nexport const AUTOFILL_TOKEN_FAX = \"fax\";\nexport const AUTOFILL_TOKEN_PAGER = \"pager\";\n\nexport const AUTOFILL_TOKENS_CONTACT = [\n    AUTOFILL_TOKEN_FAX, AUTOFILL_TOKEN_HOME, AUTOFILL_TOKEN_MOBILE, AUTOFILL_TOKEN_PAGER, AUTOFILL_TOKEN_WORK\n];\n\nexport const AUTOFILL_FIELD_STREET_ADDRESS = \"street-address\";\nexport const AUTOFILL_FIELD_ADDRESS_LINE_1 = \"address-line1\";\nexport const AUTOFILL_FIELD_ADDRESS_LINE_2 = \"address-line2\";\nexport const AUTOFILL_FIELD_ADDRESS_LINE_3 = \"address-line3\";\nexport const AUTOFILL_FIELD_ADDRESS_LEVEL_4 = \"address-level4\";\nexport const AUTOFILL_FIELD_ADDRESS_LEVEL_3 = \"address-level3\";\nexport const AUTOFILL_FIELD_ADDRESS_LEVEL_2 = \"address-level2\";\nexport const AUTOFILL_FIELD_ADDRESS_LEVEL_1 = \"address-level1\";\n\nexport const AUTOFILL_FIELD_NAME = \"name\";\nexport const AUTOFILL_FIELD_HONORIFIC_PREFIX = \"honorific-prefix\";\nexport const AUTOFILL_FIELD_GIVEN_NAME = \"given-name\";\nexport const AUTOFILL_FIELD_ADDITIONAL_NAME = \"additional-name\";\nexport const AUTOFILL_FIELD_FAMILY_NAME = \"family-name\";\nexport const AUTOFILL_FIELD_HONORIFIC_SUFFIX = \"honorific-suffix\";\nexport const AUTOFILL_FIELD_NICKNAME = \"nickname\";\nexport const AUTOFILL_FIELD_USERNAME = \"username\";\n\nexport const AUTOFILL_FIELD_NEW_PASSWORD = \"new-password\";\nexport const AUTOFILL_FIELD_CURRENT_PASSWORD = \"current-password\";\n\nexport const AUTOFILL_FIELD_ORGANIZATION_TITLE = \"organization-title\";\nexport const AUTOFILL_FIELD_ORGANIZATION = \"organization\";\n\nexport const AUTOFILL_FIELD_COUNTRY = \"country\";\nexport const AUTOFILL_FIELD_COUNTRY_NAME = \"country-name\";\nexport const AUTOFILL_FIELD_POSTAL_CODE = \"postal-code\";\n\nexport const AUTOFILL_FIELD_CC_NAME = \"cc-name\";\nexport const AUTOFILL_FIELD_CC_GIVEN_NAME = \"cc-given-name\";\nexport const AUTOFILL_FIELD_CC_ADDITIONAL_NAME = \"cc-additional-name\";\nexport const AUTOFILL_FIELD_CC_FAMILY_NAME = \"cc-family-name\";\nexport const AUTOFILL_FIELD_CC_NUMBER = \"cc-number\";\nexport const AUTOFILL_FIELD_CC_EXP = \"cc-exp\";\nexport const AUTOFILL_FIELD_CC_EXP_MONTH = \"cc-exp-month\";\nexport const AUTOFILL_FIELD_CC_EXP_YEAR = \"cc-exp-year\";\nexport const AUTOFILL_FIELD_CC_CSC = \"cc-csc\";\nexport const AUTOFILL_FIELD_CC_TYPE = \"cc-type\";\n\nexport const AUTOFILL_FIELD_TRANSACTION_CURRENCY = \"transaction-currency\";\nexport const AUTOFILL_FIELD_TRANSACTION_AMOUNT = \"transaction-amount\";\n\nexport const AUTOFILL_FIELD_LANGUAGE = \"language\";\n\nexport const AUTOFILL_FIELD_BDAY = \"bday\";\nexport const AUTOFILL_FIELD_BDAY_DAY = \"bday-day\";\nexport const AUTOFILL_FIELD_BDAY_MONTH = \"bday-month\";\nexport const AUTOFILL_FIELD_BDAY_YEAR = \"bday-year\";\n\nexport const AUTOFILL_FIELD_SEX = \"sex\";\n\nexport const AUTOFILL_FIELD_URL = \"url\";\n\nexport const AUTOFILL_FIELD_PHOTO = \"photo\";\n\nexport const AUTOFILL_FIELDS = [\n\n    AUTOFILL_FIELD_STREET_ADDRESS, AUTOFILL_FIELD_ADDRESS_LINE_1, AUTOFILL_FIELD_ADDRESS_LINE_2,\n    AUTOFILL_FIELD_ADDRESS_LINE_3, AUTOFILL_FIELD_ADDRESS_LEVEL_4, AUTOFILL_FIELD_ADDRESS_LEVEL_3,\n    AUTOFILL_FIELD_ADDRESS_LEVEL_2, AUTOFILL_FIELD_ADDRESS_LEVEL_1, AUTOFILL_FIELD_NAME,\n    AUTOFILL_FIELD_HONORIFIC_PREFIX, AUTOFILL_FIELD_GIVEN_NAME, AUTOFILL_FIELD_ADDITIONAL_NAME,\n    AUTOFILL_FIELD_FAMILY_NAME, AUTOFILL_FIELD_HONORIFIC_SUFFIX, AUTOFILL_FIELD_NICKNAME, AUTOFILL_FIELD_USERNAME,\n    AUTOFILL_FIELD_NEW_PASSWORD, AUTOFILL_FIELD_CURRENT_PASSWORD, AUTOFILL_FIELD_ORGANIZATION_TITLE,\n    AUTOFILL_FIELD_ORGANIZATION, AUTOFILL_FIELD_COUNTRY, AUTOFILL_FIELD_COUNTRY_NAME, AUTOFILL_FIELD_POSTAL_CODE,\n    AUTOFILL_FIELD_CC_NAME, AUTOFILL_FIELD_CC_GIVEN_NAME, AUTOFILL_FIELD_CC_ADDITIONAL_NAME,\n    AUTOFILL_FIELD_CC_FAMILY_NAME, AUTOFILL_FIELD_CC_NUMBER, AUTOFILL_FIELD_CC_EXP, AUTOFILL_FIELD_CC_EXP_MONTH,\n    AUTOFILL_FIELD_CC_EXP_YEAR, AUTOFILL_FIELD_CC_CSC, AUTOFILL_FIELD_CC_TYPE, AUTOFILL_FIELD_TRANSACTION_CURRENCY,\n    AUTOFILL_FIELD_TRANSACTION_AMOUNT, AUTOFILL_FIELD_LANGUAGE, AUTOFILL_FIELD_BDAY, AUTOFILL_FIELD_BDAY_DAY,\n    AUTOFILL_FIELD_BDAY_MONTH, AUTOFILL_FIELD_BDAY_YEAR, AUTOFILL_FIELD_SEX, AUTOFILL_FIELD_URL, AUTOFILL_FIELD_PHOTO\n];\n\nexport const AUTOFILL_FIELD_TEL = \"tel\";\nexport const AUTOFILL_FIELD_TEL_COUNTRY_CODE = \"tel-country-code\";\nexport const AUTOFILL_FIELD_TEL_NATIONAL = \"tel-national\";\nexport const AUTOFILL_FIELD_TEL_AREA_CODE = \"tel-area-code\";\nexport const AUTOFILL_FIELD_TEL_LOCAL = \"tel-local\";\nexport const AUTOFILL_FIELD_TEL_LOCAL_PREFIX = \"tel-local-prefix\";\nexport const AUTOFILL_FIELD_TEL_LOCAL_SUFFIX = \"tel-local-suffix\";\nexport const AUTOFILL_FIELD_TEL_LOCAL_EXTENSION = \"tel-extension\";\nexport const AUTOFILL_FIELD_EMAIL = \"email\";\nexport const AUTOFILL_FIELD_IMPP = \"impp\";\n\nexport const AUTOFILL_FIELDS_CONTACT = [\n\n    AUTOFILL_FIELD_TEL, AUTOFILL_FIELD_TEL_COUNTRY_CODE, AUTOFILL_FIELD_TEL_NATIONAL, AUTOFILL_FIELD_TEL_AREA_CODE,\n    AUTOFILL_FIELD_TEL_LOCAL, AUTOFILL_FIELD_TEL_LOCAL_PREFIX, AUTOFILL_FIELD_TEL_LOCAL_SUFFIX,\n    AUTOFILL_FIELD_TEL_LOCAL_EXTENSION, AUTOFILL_FIELD_EMAIL, AUTOFILL_FIELD_IMPP\n];\n\nexport class AutoFillUtils {\n\n    static isAddressToken(token: string): boolean {\n        return AUTOFILL_TOKENS_ADDRESS.indexOf(token) > -1;\n    }\n\n    static isContactField(token: string): boolean {\n        return AUTOFILL_FIELDS_CONTACT.indexOf(token) > -1;\n    }\n\n    static isContactToken(token: string): boolean {\n        return AUTOFILL_TOKENS_CONTACT.indexOf(token) > -1;\n    }\n\n    static isField(token: string): boolean {\n        return AUTOFILL_FIELDS.indexOf(token) > -1;\n    }\n\n    static isSectionToken(token: string): boolean {\n        return token.startsWith(\"section-\");\n    }\n\n    static validate(tokens: string): boolean {\n\n        let toExpression = (total: string, currentValue: string) => `${total}|${currentValue}`,\n            tokensAddress = AUTOFILL_TOKENS_ADDRESS.reduce(toExpression),\n            tokensContact = AUTOFILL_TOKENS_CONTACT.reduce(toExpression),\n            fields = AUTOFILL_FIELDS.reduce(toExpression),\n            fieldsContact = AUTOFILL_FIELDS_CONTACT.reduce(toExpression),\n            regex = new RegExp(`^(section-\\\\w+\\\\s{1})?((${tokensAddress}){1}\\\\s)?((${fields}){1}|((${tokensContact}){1}\\\\s{1}(${fieldsContact})))$`);\n\n        return regex.test(tokens);\n    }\n}","import { DynamicFormValueControlModel, DynamicFormValueControlModelConfig } from \"./dynamic-form-value-control.model\";\nimport { DynamicFormControlLayout } from \"./misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../decorator/serializable.decorator\";\nimport { AUTOCOMPLETE_ON } from \"../utils/autofill.utils\";\n\nexport interface DynamicInputControlModelConfig<T> extends DynamicFormValueControlModelConfig<T> {\n\n    autoComplete?: string;\n    autoFocus?: boolean;\n    maxLength?: number;\n    minLength?: number;\n    placeholder?: string;\n    prefix?: string;\n    readOnly?: boolean;\n    spellCheck?: boolean;\n    suffix?: string;\n}\n\nexport abstract class DynamicInputControlModel<T> extends DynamicFormValueControlModel<T> {\n\n    @serializable() autoComplete: string;\n    @serializable() autoFocus: boolean;\n    @serializable() maxLength: number | null;\n    @serializable() minLength: number | null;\n    @serializable() placeholder: string;\n    @serializable() prefix: string | null;\n    @serializable() readOnly: boolean;\n    @serializable() spellCheck: boolean;\n    @serializable() suffix: string | null;\n\n    protected constructor(config: DynamicInputControlModelConfig<T>, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.autoComplete = config.autoComplete || AUTOCOMPLETE_ON;\n        this.autoFocus = typeof config.autoFocus === \"boolean\" ? config.autoFocus : false;\n        this.maxLength = typeof config.maxLength === \"number\" ? config.maxLength : null;\n        this.minLength = typeof config.minLength === \"number\" ? config.minLength : null;\n        this.placeholder = config.placeholder || \"\";\n        this.prefix = config.prefix || null;\n        this.readOnly = typeof config.readOnly === \"boolean\" ? config.readOnly : false;\n        this.spellCheck = typeof config.spellCheck === \"boolean\" ? config.spellCheck : false;\n        this.suffix = config.suffix || null;\n    }\n}","export class JSONUtils {\n\n    static maskToString(mask: string | RegExp | (string | RegExp)[]): string | string[] | null {\n\n        if (typeof mask === \"string\") {\n\n            return mask as string;\n\n        } else if (mask instanceof RegExp) {\n\n            return mask.toString();\n\n        } else if (Array.isArray(mask)) {\n\n            return mask.map(value => JSONUtils.maskToString(value)) as string[];\n        }\n\n        return null;\n    }\n\n    static maskFromString(mask: string | string[]): string | RegExp | (string | RegExp)[] | null {\n\n        if (typeof mask === \"string\") {\n\n            let isRegExp = (mask as string).startsWith(\"/\") && (mask as string).endsWith(\"/\");\n\n            return isRegExp ? new RegExp((mask as string).slice(1, mask.length - 1)) : mask;\n\n        } else if (Array.isArray(mask)) {\n\n            return (mask as string[]).map(value => JSONUtils.maskFromString(value)) as string[];\n        }\n\n        return null;\n    }\n\n    static parseReviver(_key: string, value: any): any {\n\n        let regexDateISO = /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*))(?:Z|(\\+|-)([\\d|:]*))?$/;\n\n        return typeof value === \"string\" && regexDateISO.test(value) ? new Date(value) : value;\n    }\n}","import { DynamicInputControlModel, DynamicInputControlModelConfig } from \"../dynamic-input-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\nimport { JSONUtils } from \"../../utils/json.utils\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_INPUT = \"INPUT\";\n\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_COLOR = \"color\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATE = \"date\";\n//export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATETIME = \"datetime\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATETIME_LOCAL = \"datetime-local\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_EMAIL = \"email\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_FILE = \"file\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_MONTH = \"month\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_NUMBER = \"number\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_PASSWORD = \"password\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_RANGE = \"range\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_SEARCH = \"search\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEL = \"tel\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEXT = \"text\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_TIME = \"time\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_URL = \"url\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_WEEK = \"week\";\n\nexport interface DynamicInputModelConfig extends DynamicInputControlModelConfig<string | number | Date | string[]> {\n\n    accept?: string;\n    inputType?: string;\n    list?: string[];\n    mask?: string | RegExp | (string | RegExp)[];\n    max?: number | string | Date;\n    min?: number | string | Date;\n    multiple?: boolean;\n    pattern?: string;\n    step?: number;\n}\n\nexport class DynamicInputModel extends DynamicInputControlModel<string | number | Date | string[]> {\n\n    @serializable() accept: string | null;\n    @serializable() inputType: string;\n    files: FileList | null = null;\n    @serializable() list: string[] | null;\n    @serializable() mask: string | RegExp | (string | RegExp)[] | null;\n    @serializable() max: number | string | Date | null;\n    @serializable() min: number | string | Date | null;\n    @serializable() multiple: boolean | null;\n    @serializable() pattern: string | null;\n    @serializable() step: number | null;\n\n    private _listId: string | null = null;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_INPUT;\n\n    constructor(config: DynamicInputModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.accept = config.accept || null;\n        this.inputType = config.inputType || DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEXT;\n        this.list = Array.isArray(config.list) ? config.list : null;\n        this.mask = config.mask || null;\n        this.max = config.max !== undefined ? config.max : null;\n        this.min = config.min !== undefined ? config.min : null;\n        this.multiple = typeof config.multiple === \"boolean\" ? config.multiple : null;\n        this.pattern = config.pattern || null;\n        this.step = typeof config.step === \"number\" ? config.step : null;\n\n        if (this.list) {\n            this._listId = `${this.id}List`;\n        }\n    }\n\n    get listId(): string | null {\n        return this._listId;\n    }\n\n    get hasList(): boolean {\n        return Array.isArray(this.list);\n    }\n\n    toJSON() {\n\n        let json: any = super.toJSON();\n\n        if (this.mask !== null) { json.mask = JSONUtils.maskToString(this.mask); }\n\n        return json;\n    }\n}","import { FormGroup, FormControl } from \"@angular/forms\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport {\n    DynamicFormControlRelation,\n    DynamicFormControlRelationGroup,\n    DYNAMIC_FORM_CONTROL_ACTION_DISABLE,\n    DYNAMIC_FORM_CONTROL_ACTION_ENABLE,\n    DYNAMIC_FORM_CONTROL_CONNECTIVE_AND,\n    DYNAMIC_FORM_CONTROL_CONNECTIVE_OR\n} from \"../model/misc/dynamic-form-control-relation.model\";\n\nexport class RelationUtils {\n\n    static findActivationRelation(relGroups: DynamicFormControlRelationGroup[]): DynamicFormControlRelationGroup | null {\n\n        let rel = relGroups.find(rel => {\n            return rel.action === DYNAMIC_FORM_CONTROL_ACTION_DISABLE || rel.action === DYNAMIC_FORM_CONTROL_ACTION_ENABLE;\n        });\n\n        return rel !== undefined ? rel : null;\n    }\n\n    static getRelatedFormControls(model: DynamicFormControlModel, controlGroup: FormGroup): FormControl[] {\n\n        let controls: FormControl[] = [];\n\n        model.relation.forEach(relGroup => relGroup.when.forEach(rel => {\n\n            if (model.id === rel.id) {\n                throw new Error(`FormControl ${model.id} cannot depend on itself`);\n            }\n\n            let control = controlGroup.get(rel.id) as FormControl;\n\n            if (control && !controls.some(controlElement => controlElement === control)) {\n                controls.push(control);\n            }\n        }));\n\n        return controls;\n    }\n\n    static isFormControlToBeDisabled(relGroup: DynamicFormControlRelationGroup, _formGroup: FormGroup): boolean {\n\n        let formGroup: FormGroup = _formGroup;\n\n        return relGroup.when.reduce((toBeDisabled: boolean, rel: DynamicFormControlRelation, index: number) => {\n\n            let control = formGroup.get(rel.id);\n\n            if (control && relGroup.action === DYNAMIC_FORM_CONTROL_ACTION_DISABLE) {\n\n                if (index > 0 && relGroup.connective === DYNAMIC_FORM_CONTROL_CONNECTIVE_AND && !toBeDisabled) {\n                    return false;\n                }\n\n                if (index > 0 && relGroup.connective === DYNAMIC_FORM_CONTROL_CONNECTIVE_OR && toBeDisabled) {\n                    return true;\n                }\n\n                return rel.value === control.value || rel.status === control.status;\n            }\n\n            if (control && relGroup.action === DYNAMIC_FORM_CONTROL_ACTION_ENABLE) {\n\n                if (index > 0 && relGroup.connective === DYNAMIC_FORM_CONTROL_CONNECTIVE_AND && toBeDisabled) {\n                    return true;\n                }\n\n                if (index > 0 && relGroup.connective === DYNAMIC_FORM_CONTROL_CONNECTIVE_OR && !toBeDisabled) {\n                    return false;\n                }\n\n                return !(rel.value === control.value || rel.status === control.status);\n            }\n\n            return false;\n\n        }, false);\n    }\n}","export const DYNAMIC_FORM_CONTROL_ACTION_DISABLE = \"DISABLE\";\nexport const DYNAMIC_FORM_CONTROL_ACTION_ENABLE = \"ENABLE\";\nexport const DYNAMIC_FORM_CONTROL_ACTION_VISIBLE = \"VISIBLE\";\nexport const DYNAMIC_FORM_CONTROL_ACTION_HIDDEN = \"HIDDEN\";\n\nexport const DYNAMIC_FORM_CONTROL_CONNECTIVE_AND = \"AND\";\nexport const DYNAMIC_FORM_CONTROL_CONNECTIVE_OR = \"OR\";\n\nexport interface DynamicFormControlRelation {\n\n    id: string;\n    status?: string;\n    value?: any;\n}\n\nexport interface DynamicFormControlRelationGroup {\n\n    action: string;\n    connective?: string;\n    when: DynamicFormControlRelation[];\n}","import {\n    ComponentFactoryResolver,\n    ComponentRef,\n    EventEmitter,\n    OnChanges,\n    OnDestroy,\n    QueryList,\n    SimpleChange,\n    SimpleChanges,\n    Type,\n    ViewContainerRef\n} from \"@angular/core\";\nimport { FormControl, FormGroup } from \"@angular/forms\";\nimport { Subscription } from \"rxjs\";\nimport {\n    DynamicFormControlCustomEvent,\n    DynamicFormControlEvent,\n    DynamicFormControlEventType,\n    isDynamicFormControlEvent\n} from \"./dynamic-form-control.event\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport { DynamicFormValueControlModel } from \"../model/dynamic-form-value-control.model\";\nimport {\n    DynamicFormArrayGroupModel,\n    DYNAMIC_FORM_CONTROL_TYPE_ARRAY\n} from \"../model/form-array/dynamic-form-array.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX } from \"../model/checkbox/dynamic-checkbox.model\";\nimport {\n    DynamicInputModel,\n    DYNAMIC_FORM_CONTROL_TYPE_INPUT,\n    DYNAMIC_FORM_CONTROL_INPUT_TYPE_FILE\n} from \"../model/input/dynamic-input.model\";\nimport {\n    DynamicFormControlLayout,\n    DynamicFormControlLayoutContext,\n    DynamicFormControlLayoutPlace\n} from \"../model/misc/dynamic-form-control-layout.model\";\nimport { DynamicFormControlRelationGroup } from \"../model/misc/dynamic-form-control-relation.model\";\nimport { DynamicTemplateDirective } from \"../directive/dynamic-template.directive\";\nimport { DynamicFormLayout, DynamicFormLayoutService } from \"../service/dynamic-form-layout.service\";\nimport { DynamicFormValidationService } from \"../service/dynamic-form-validation.service\";\nimport { RelationUtils } from \"../utils/relation.utils\";\nimport { DynamicFormControl } from \"./dynamic-form-control.interface\";\n\nexport abstract class DynamicFormControlContainerComponent implements OnChanges, OnDestroy {\n\n    bindId: boolean;\n    context: DynamicFormArrayGroupModel | null = null;\n    control: FormControl;\n    group: FormGroup;\n    hasFocus: boolean;\n    layout: DynamicFormLayout;\n    model: DynamicFormControlModel;\n\n    contentTemplateList: QueryList<DynamicTemplateDirective> | undefined;\n    inputTemplateList: QueryList<DynamicTemplateDirective> | undefined;\n\n    blur: EventEmitter<DynamicFormControlEvent>;\n    change: EventEmitter<DynamicFormControlEvent>;\n    customEvent: EventEmitter<DynamicFormControlEvent> | undefined;\n    focus: EventEmitter<DynamicFormControlEvent>;\n\n    componentViewContainerRef: ViewContainerRef;\n\n    protected componentRef: ComponentRef<DynamicFormControl>;\n    protected componentSubscriptions: Subscription[] = [];\n    protected subscriptions: Subscription[] = [];\n\n    protected constructor(protected componentFactoryResolver: ComponentFactoryResolver,\n                          protected layoutService: DynamicFormLayoutService,\n                          protected validationService: DynamicFormValidationService) { }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        let groupChange = changes[\"group\"] as SimpleChange,\n            modelChange = changes[\"model\"] as SimpleChange;\n\n        if (modelChange) {\n\n            this.destroyFormControlComponent();\n            this.createFormControlComponent();\n        }\n\n        if (groupChange || modelChange) {\n\n            if (this.model) {\n\n                this.unsubscribe();\n\n                if (this.group) {\n\n                    this.control = this.group.get(this.model.id) as FormControl;\n                    this.subscriptions.push(this.control.valueChanges.subscribe(value => this.onControlValueChanges(value)));\n                }\n\n                this.subscriptions.push(this.model.disabledUpdates.subscribe(value => this.onModelDisabledUpdates(value)));\n\n                if (this.model instanceof DynamicFormValueControlModel) {\n\n                    let model = this.model as DynamicFormValueControlModel<any>;\n\n                    this.subscriptions.push(model.valueUpdates.subscribe(value => this.onModelValueUpdates(value)));\n                }\n\n                if (this.model.relation.length > 0) {\n                    this.setControlRelations();\n                }\n            }\n        }\n    }\n\n    ngOnDestroy() {\n\n        this.destroyFormControlComponent();\n        this.unsubscribe();\n    }\n\n    abstract get componentType(): Type<DynamicFormControl> | null;\n\n    get errorMessages(): string[] {\n        return this.validationService.createErrorMessages(this.control, this.model);\n    }\n\n    get hasHint(): boolean {\n        return typeof (this.model as DynamicFormValueControlModel<any>).hint === \"string\";\n    }\n\n    get hasLabel(): boolean {\n        return typeof this.model.label === \"string\";\n    }\n\n    get isCheckbox(): boolean {\n        return this.model.type === DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX;\n    }\n\n    get isInvalid(): boolean {\n        return this.control.invalid;\n    }\n\n    get isValid(): boolean {\n        return this.control.valid;\n    }\n\n    get showErrorMessages(): boolean {\n        return this.model.hasErrorMessages && this.control.touched && !this.hasFocus && this.isInvalid;\n    }\n\n    get templates(): QueryList<DynamicTemplateDirective> | undefined {\n        return this.inputTemplateList !== undefined ? this.inputTemplateList : this.contentTemplateList;\n    }\n\n    get startTemplate(): DynamicTemplateDirective | undefined {\n        return this.model.type !== DYNAMIC_FORM_CONTROL_TYPE_ARRAY ?\n            this.layoutService.getStartTemplate(this.model, this.templates) : undefined;\n    }\n\n    get endTemplate(): DynamicTemplateDirective | undefined {\n        return this.model.type !== DYNAMIC_FORM_CONTROL_TYPE_ARRAY ?\n            this.layoutService.getEndTemplate(this.model, this.templates) : undefined;\n    }\n\n    getClass(context: DynamicFormControlLayoutContext, place: DynamicFormControlLayoutPlace, model: DynamicFormControlModel = this.model): string {\n\n        let controlLayout = (this.layout && this.layout[model.id]) || model.layout as DynamicFormControlLayout;\n\n        return this.layoutService.getClass(controlLayout, context, place);\n    }\n\n    protected createFormControlComponent(): void {\n\n        let componentType = this.componentType;\n\n        if (componentType !== null) {\n\n            let componentFactory = this.componentFactoryResolver.resolveComponentFactory(componentType);\n\n            this.componentViewContainerRef.clear();\n            this.componentRef = this.componentViewContainerRef.createComponent(componentFactory);\n\n            let instance = this.componentRef.instance;\n\n            instance.bindId = this.bindId;\n            instance.group = this.group;\n            instance.layout = this.layout;\n            instance.model = this.model as any;\n\n            if (this.templates) {\n                instance.templates = this.templates;\n            }\n\n            this.componentSubscriptions.push(instance.blur.subscribe(($event: any) => this.onBlur($event)));\n            this.componentSubscriptions.push(instance.change.subscribe(($event: any) => this.onChange($event)));\n            this.componentSubscriptions.push(instance.focus.subscribe(($event: any) => this.onFocus($event)));\n\n            if (instance.customEvent !== undefined) {\n                this.componentSubscriptions.push(\n                    instance.customEvent.subscribe(($event: any) => this.onCustomEvent($event)));\n            }\n        }\n    }\n\n    protected destroyFormControlComponent(): void {\n\n        if (this.componentRef) {\n\n            this.componentSubscriptions.forEach(subscription => subscription.unsubscribe());\n            this.componentSubscriptions = [];\n\n            this.componentRef.destroy();\n        }\n    }\n\n    protected setControlRelations(): void {\n\n        let relActivation = RelationUtils.findActivationRelation(this.model.relation);\n\n        if (relActivation !== null) {\n\n            let rel = relActivation as DynamicFormControlRelationGroup;\n\n            this.updateModelDisabled(rel);\n\n            RelationUtils.getRelatedFormControls(this.model, this.group).forEach(control => {\n\n                this.subscriptions.push(control.valueChanges.subscribe(() => this.updateModelDisabled(rel)));\n                this.subscriptions.push(control.statusChanges.subscribe(() => this.updateModelDisabled(rel)));\n            });\n        }\n    }\n\n    protected createDynamicFormControlEvent($event: any, type: string): DynamicFormControlEvent {\n        return {$event, context: this.context, control: this.control, group: this.group, model: this.model, type};\n    }\n\n    updateModelDisabled(relation: DynamicFormControlRelationGroup): void {\n\n        this.model.disabledUpdates.next(RelationUtils.isFormControlToBeDisabled(relation, this.group));\n    }\n\n    unsubscribe(): void {\n\n        this.subscriptions.forEach(subscription => subscription.unsubscribe());\n        this.subscriptions = [];\n    }\n\n    onControlValueChanges(value: any): void {\n\n        if (this.model instanceof DynamicFormValueControlModel) {\n\n            let model = this.model as DynamicFormValueControlModel<any>;\n\n            if (model.value !== value) {\n                model.valueUpdates.next(value);\n            }\n        }\n    }\n\n    onModelValueUpdates(value: any): void {\n\n        if (this.control.value !== value) {\n            this.control.setValue(value);\n        }\n    }\n\n    onModelDisabledUpdates(value: boolean): void {\n        value ? this.control.disable() : this.control.enable();\n    }\n\n    onChange($event: Event | DynamicFormControlEvent | any): void {\n\n        if ($event && $event instanceof Event) { // native HTML5 change event\n\n            if (this.model.type === DYNAMIC_FORM_CONTROL_TYPE_INPUT) {\n\n                let model = this.model as DynamicInputModel;\n\n                if (model.inputType === DYNAMIC_FORM_CONTROL_INPUT_TYPE_FILE) {\n\n                    let inputElement: any = $event.target || $event.srcElement;\n\n                    model.files = inputElement.files as FileList;\n                }\n            }\n\n            this.change.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Change));\n\n        } else if (isDynamicFormControlEvent($event)) { // event bypass\n\n            this.change.emit($event);\n\n        } else { // custom library value change event\n\n            this.change.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Change));\n        }\n    }\n\n    onBlur($event: FocusEvent | DynamicFormControlEvent | any): void {\n\n        if (isDynamicFormControlEvent($event)) { // event bypass\n\n            this.blur.emit($event);\n\n        } else { // native HTML 5 or UI library blur event\n\n            this.hasFocus = false;\n            this.blur.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Blur));\n        }\n    }\n\n    onFocus($event: FocusEvent | DynamicFormControlEvent | any): void {\n\n        if (isDynamicFormControlEvent($event)) { // event bypass\n\n            this.focus.emit($event);\n\n        } else { // native HTML 5 or UI library focus event\n\n            this.hasFocus = true;\n            this.focus.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Focus));\n        }\n    }\n\n    onCustomEvent($event: DynamicFormControlEvent | DynamicFormControlCustomEvent): void {\n\n        let emitter = this.customEvent as EventEmitter<DynamicFormControlEvent>;\n\n        if (isDynamicFormControlEvent($event)) { // child event bypass\n\n            emitter.emit($event);\n\n        } else { // native UI library custom event\n\n            emitter.emit(this.createDynamicFormControlEvent($event.customEvent, $event.customEventType));\n        }\n    }\n}","import { AfterViewInit, QueryList, TemplateRef } from \"@angular/core\";\nimport { DynamicTemplateableFormControl } from \"./dynamic-templateable-form-control.interface\";\nimport { DynamicTemplateDirective } from \"../directive/dynamic-template.directive\";\nimport { DynamicFormControlComponent } from \"./dynamic-form-control.component\";\n\nexport abstract class DynamicTemplateableFormControlComponent extends DynamicFormControlComponent implements DynamicTemplateableFormControl, AfterViewInit {\n\n    readonly templateDirectives: Map<string, string>;\n\n    templates: QueryList<DynamicTemplateDirective> | DynamicTemplateDirective[] | undefined;\n\n    ngAfterViewInit() {\n\n        this.layoutService\n            .filterTemplatesByModel(this.model, this.templates)\n            .forEach(template => this.bindTemplate(template));\n    }\n\n    abstract get viewChild(): any;\n\n    abstract mapTemplate(template: DynamicTemplateDirective): DynamicTemplateDirective | TemplateRef<any>;\n\n    bindTemplate(template: DynamicTemplateDirective) {\n\n        if (typeof template.as === \"string\" && this.templateDirectives.has(template.as)) {\n\n            let property = this.templateDirectives.get(template.as) as string;\n\n            this.viewChild[property] = this.mapTemplate(template);\n        }\n    }\n}","import { Directive, Input, TemplateRef } from \"@angular/core\";\n\nexport enum DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT { Start = \"START\", End = \"END\"}\n\n@Directive({\n    selector: \"ng-template[modelId],ng-template[modelType]\"\n})\nexport class DynamicTemplateDirective {\n\n    @Input() align: string = DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT.End;\n    @Input() as: string | null = null;\n    @Input() modelId: string;\n    @Input() modelType: string;\n\n    constructor(public templateRef: TemplateRef<any>) {}\n}","import { Directive, ElementRef, Input, Renderer2, AfterViewInit } from \"@angular/core\";\n\n@Directive({\n    selector: \"[dynamicId]\"\n})\nexport class DynamicIdDirective implements AfterViewInit {\n\n    @Input() dynamicId: string | boolean;\n\n    constructor(private elementRef: ElementRef, private renderer: Renderer2) {}\n\n    ngAfterViewInit() {\n\n        if (this.dynamicId) {\n            this.renderer.setAttribute(this.elementRef.nativeElement, \"id\", this.dynamicId as string);\n        }\n    }\n}","import { DynamicFormValueControlModelConfig, DynamicFormValueControlModel } from \"./dynamic-form-value-control.model\";\nimport { DynamicFormControlLayout } from \"./misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../decorator/serializable.decorator\";\n\nexport type DynamicDateControlValue = string | object | Date;\n\nexport interface DynamicDateControlModelConfig extends DynamicFormValueControlModelConfig<DynamicDateControlValue> {\n\n    format?: string;\n    max?: DynamicDateControlValue;\n    min?: DynamicDateControlValue;\n    placeholder?: string;\n}\n\nexport abstract class DynamicDateControlModel extends DynamicFormValueControlModel<DynamicDateControlValue> {\n\n    @serializable() format: string | null;\n    @serializable() max: DynamicDateControlValue | null;\n    @serializable() min: DynamicDateControlValue | null;\n    @serializable() placeholder: string | null;\n\n    protected constructor(config: DynamicDateControlModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.format = config.format || null;\n        this.max = config.max || null;\n        this.min = config.min || null;\n        this.placeholder = config.placeholder || null;\n    }\n}","import { DynamicFormValueControlModelConfig, DynamicFormValueControlModel } from \"./dynamic-form-value-control.model\";\nimport { DynamicFormControlLayout } from \"./misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../decorator/serializable.decorator\";\n\nexport interface DynamicFileControlModelConfig extends DynamicFormValueControlModelConfig<File | File[]> {\n\n    multiple?: boolean;\n}\n\nexport abstract class DynamicFileControlModel extends DynamicFormValueControlModel<File | File[]> {\n\n    @serializable() multiple: boolean;\n\n    protected constructor(config: DynamicFileControlModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.multiple = typeof config.multiple === \"boolean\" ? config.multiple : false;\n    }\n}","import { Observable, of } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { DynamicFormValueControlModel, DynamicFormValueControlModelConfig } from \"./dynamic-form-value-control.model\";\nimport { DynamicFormControlLayout } from \"./misc/dynamic-form-control-layout.model\";\nimport { serializable, serialize } from \"../decorator/serializable.decorator\";\n\nexport interface DynamicFormOptionConfig<T> {\n\n    disabled?: boolean;\n    label?: string;\n    value: T;\n}\n\nexport class DynamicFormOption<T> {\n\n    @serializable() disabled: boolean;\n    @serializable() label: string | null;\n    @serializable() value: T;\n\n    constructor(config: DynamicFormOptionConfig<T>) {\n\n        this.disabled = typeof config.disabled === \"boolean\" ? config.disabled : false;\n        this.label = config.label || null;\n        this.value = config.value;\n    }\n\n    get text() {\n        return this.label;\n    }\n\n    set text(text: string | null) {\n        this.label = text;\n    }\n\n    toJSON() {\n        return serialize(this);\n    }\n}\n\nexport interface DynamicOptionControlModelConfig<T> extends DynamicFormValueControlModelConfig<T | T[]> {\n\n    options?: DynamicFormOptionConfig<T>[] | Observable<DynamicFormOptionConfig<T>[]>;\n}\n\nexport abstract class DynamicOptionControlModel<T> extends DynamicFormValueControlModel<T | T[]> {\n\n    @serializable(\"options\") _options: DynamicFormOption<T>[] = [];\n    options$: Observable<DynamicFormOption<T>[]>;\n\n    protected constructor(config: DynamicOptionControlModelConfig<T>, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.options = config.options;\n    }\n\n    private updateOptions$(): void {\n        this.options$ = of(this.options);\n    }\n\n    set options(options: any) {\n\n        if (Array.isArray(options)) {\n\n            this._options = (options as DynamicFormOptionConfig<T>[]).map(optionConfig => {\n                return new DynamicFormOption<T>(optionConfig);\n            });\n\n            this.updateOptions$();\n\n        } else if (!!options && typeof options.lift === \"function\" && typeof options.subscribe === \"function\") { // replace with isObservable in next major version\n\n            this.options$ = (options as Observable<DynamicFormOptionConfig<T>[]>).pipe(\n\n                map(optionsConfig => {\n\n                    let options = optionsConfig.map(optionConfig => new DynamicFormOption<T>(optionConfig));\n\n                    this._options = options;\n\n                    return options;\n                }));\n\n        } else {\n\n            this.updateOptions$();\n        }\n    }\n\n    get options(): any {\n        return this._options;\n    }\n\n    add(optionConfig: DynamicFormOptionConfig<T>): DynamicFormOption<T> {\n        return this.insert(this.options.length, optionConfig);\n    }\n\n    get(index: number): DynamicFormOption<T> {\n        return this.options[index];\n    }\n\n    insert(index: number, optionConfig: DynamicFormOptionConfig<T>): DynamicFormOption<T> {\n\n        let option = new DynamicFormOption(optionConfig);\n\n        this.options.splice(index, 0, option);\n        this.updateOptions$();\n\n        return option;\n    }\n\n    remove(...indices: number[]): void {\n\n        indices.forEach(index => this.options.splice(index, 1));\n        this.updateOptions$();\n    }\n\n    abstract select(...indices: number[]): void;\n}","import { DynamicFormControlModel, DynamicFormControlModelConfig } from \"../dynamic-form-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_GROUP = \"GROUP\";\n\nexport interface DynamicFormGroupModelConfig extends DynamicFormControlModelConfig {\n\n    group?: DynamicFormControlModel[];\n    legend?: string;\n}\n\nexport class DynamicFormGroupModel extends DynamicFormControlModel {\n\n    @serializable() group: DynamicFormControlModel[] = [];\n    @serializable() legend: string | null;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_GROUP;\n\n    constructor(config: DynamicFormGroupModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.group = Array.isArray(config.group) ? config.group : [];\n        this.legend = config.legend || null;\n    }\n\n    get(index: number): DynamicFormControlModel {\n        return this.group[index];\n    }\n\n    set(index: number, controlModel: DynamicFormControlModel,): void {\n        this.group[index] = controlModel;\n    }\n\n    add(controlModel: DynamicFormControlModel): void {\n        this.group.push(controlModel);\n    }\n\n    insert(index: number, controlModel: DynamicFormControlModel): void {\n        this.group.splice(index, 0, controlModel);\n    }\n\n    move(index: number, step: number): void {\n        this.group.splice(index + step, 0, ...this.group.splice(index, 1));\n    }\n\n    remove(index: number) {\n        this.group.splice(index, 1);\n    }\n\n    size(): number {\n        return this.group.length;\n    }\n}","import { DynamicFormGroupModel, DynamicFormGroupModelConfig } from \"../form-group/dynamic-form-group.model\";\nimport { DynamicCheckboxModel } from \"./dynamic-checkbox.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP = \"CHECKBOX_GROUP\";\n\nexport class DynamicCheckboxGroupModel extends DynamicFormGroupModel {\n\n    @serializable() group: DynamicCheckboxModel[];\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP;\n\n    constructor(config: DynamicFormGroupModelConfig, layout?: DynamicFormControlLayout) {\n        super(config, layout);\n    }\n\n    check(...indices: number[]): void {\n        indices.forEach(index => this.group[index].checked = true);\n    }\n\n    uncheck(...indices: number[]): void {\n        indices.forEach(index => this.group[index].checked = false);\n    }\n\n    checkAll(): void {\n        this.group.forEach(model => model.checked = true);\n    }\n\n    uncheckAll(): void {\n        this.group.forEach(model => model.checked = false);\n    }\n}","import { DynamicFormValueControlModelConfig, DynamicFormValueControlModel } from \"../dynamic-form-value-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER = \"COLORPICKER\";\n\nexport interface DynamicColorPickerModelConfig extends DynamicFormValueControlModelConfig<string | object> {\n\n    format?: string;\n    inline?: boolean;\n}\n\nexport class DynamicColorPickerModel extends DynamicFormValueControlModel<string | object> {\n\n    @serializable() format: string | null;\n    @serializable() inline: boolean;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER;\n\n    constructor(config: DynamicColorPickerModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.format = typeof config.format === \"string\" ? config.format : null;\n        this.inline = typeof config.inline === \"boolean\" ? config.inline : false;\n    }\n}","import {\n    DynamicDateControlModel,\n    DynamicDateControlModelConfig,\n    DynamicDateControlValue\n} from \"../dynamic-date-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER = \"DATEPICKER\";\n\nexport interface DynamicDatePickerModelConfig extends DynamicDateControlModelConfig {\n\n    autoFocus?: boolean;\n    focusedDate?: DynamicDateControlValue;\n    inline?: boolean;\n    prefix?: string;\n    readOnly?: boolean;\n    suffix?: string;\n    toggleIcon?: string;\n    toggleLabel?: string;\n}\n\nexport class DynamicDatePickerModel extends DynamicDateControlModel {\n\n    @serializable() autoFocus: boolean;\n    @serializable() focusedDate: DynamicDateControlValue | null;\n    @serializable() inline: boolean;\n    @serializable() prefix: string | null;\n    @serializable() readOnly : boolean;\n    @serializable() suffix: string | null;\n    @serializable() toggleIcon: string | null;\n    @serializable() toggleLabel: string | null;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER;\n\n    constructor(config: DynamicDatePickerModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.autoFocus = typeof config.autoFocus === \"boolean\" ? config.autoFocus : false;\n        this.focusedDate = config.focusedDate || null;\n        this.inline = typeof config.inline === \"boolean\" ? config.inline : false;\n        this.prefix = config.prefix || null;\n        this.readOnly = typeof config.readOnly === \"boolean\" ? config.readOnly : false;\n        this.toggleIcon = typeof config.toggleIcon === \"string\" ? config.toggleIcon : null;\n        this.toggleLabel = typeof config.toggleLabel === \"string\" ? config.toggleLabel : null;\n        this.suffix = config.suffix || null;\n    }\n}","import { DynamicInputControlModel, DynamicInputControlModelConfig } from \"../dynamic-input-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_EDITOR = \"EDITOR\";\n\nexport interface DynamicEditorModelConfig extends DynamicInputControlModelConfig<string> {\n}\n\nexport class DynamicEditorModel extends DynamicInputControlModel<string> {\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_EDITOR;\n\n    constructor(config: DynamicEditorModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n    }\n}","import { DynamicFileControlModelConfig, DynamicFileControlModel } from \"../dynamic-file-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_FILE_UPLOAD = \"FILE_UPLOAD\";\n\nexport interface DynamicFileUploadModelConfig extends DynamicFileControlModelConfig {\n\n    accept?: string[];\n    autoUpload?: boolean;\n    maxSize?: number;\n    minSize?: number;\n    removeUrl?: string;\n    showFileList?: boolean;\n    url?: string;\n}\n\nexport class DynamicFileUploadModel extends DynamicFileControlModel {\n\n    @serializable() accept: string[] | null;\n    @serializable() autoUpload: boolean;\n    @serializable() maxSize: number | null;\n    @serializable() minSize: number | null;\n    @serializable() removeUrl: string | null;\n    @serializable() showFileList: boolean;\n    @serializable() url: string | null;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_FILE_UPLOAD;\n\n    constructor(config: DynamicFileUploadModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.accept = Array.isArray(config.accept) ? config.accept : null;\n        this.autoUpload = typeof config.autoUpload === \"boolean\" ? config.autoUpload : true;\n        this.maxSize = typeof config.maxSize === \"number\" ? config.maxSize : null;\n        this.minSize = typeof config.minSize === \"number\" ? config.minSize : null;\n        this.removeUrl = config.removeUrl || null;\n        this.showFileList = typeof config.showFileList === \"boolean\" ? config.showFileList : true;\n        this.url = config.url || null;\n    }\n}","import { DynamicOptionControlModel, DynamicOptionControlModelConfig } from \"../dynamic-option-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP = \"RADIO_GROUP\";\n\nexport interface DynamicRadioGroupModelConfig<T> extends DynamicOptionControlModelConfig<T> {\n\n    legend?: string;\n}\n\nexport class DynamicRadioGroupModel<T> extends DynamicOptionControlModel<T> {\n\n    @serializable() legend: string | null;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP;\n\n    constructor(config: DynamicRadioGroupModelConfig<T>, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.legend = config.legend || null;\n    }\n\n    select(index: number): void {\n        this.valueUpdates.next(this.get(index).value);\n    }\n}","import { DynamicFormValueControlModelConfig, DynamicFormValueControlModel } from \"../dynamic-form-value-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_RATING = \"RATING\";\n\nexport interface DynamicRatingModelConfig extends DynamicFormValueControlModelConfig<number> {\n\n    max?: number;\n}\n\nexport class DynamicRatingModel extends DynamicFormValueControlModel<number> {\n\n    @serializable() max: number | null;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_RATING;\n\n    constructor(config: DynamicRatingModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.max = typeof config.max === \"number\" ? config.max : 10;\n    }\n}","import { DynamicOptionControlModel, DynamicOptionControlModelConfig } from \"../dynamic-option-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_SELECT = \"SELECT\";\n\nexport interface DynamicSelectModelConfig<T> extends DynamicOptionControlModelConfig<T> {\n\n    filterable?: boolean;\n    multiple?: boolean;\n    placeholder?: string;\n    prefix?: string;\n    suffix?: string;\n}\n\nexport class DynamicSelectModel<T> extends DynamicOptionControlModel<T> {\n\n    @serializable() filterable: boolean;\n    @serializable() multiple: boolean;\n    @serializable() placeholder: string;\n    @serializable() prefix: string | null;\n    @serializable() suffix: string | null;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_SELECT;\n\n    constructor(config: DynamicSelectModelConfig<T>, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.filterable = typeof config.filterable === \"boolean\" ? config.filterable : false;\n        this.multiple = typeof config.multiple === \"boolean\" ? config.multiple : false;\n        this.placeholder = config.placeholder || \"\";\n        this.prefix = config.prefix || null;\n        this.suffix = config.suffix || null;\n    }\n\n    select(...indices: number[]): void {\n\n        let value = this.multiple ? indices.map(index => this.get(index).value) : this.get(indices[0]).value;\n\n        this.valueUpdates.next(value);\n    }\n}","import { DynamicFormValueControlModelConfig, DynamicFormValueControlModel } from \"../dynamic-form-value-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_SLIDER = \"SLIDER\";\n\nexport interface DynamicSliderModelConfig extends DynamicFormValueControlModelConfig<number> {\n\n    max?: number;\n    min?: number;\n    step?: number;\n    vertical?: boolean;\n}\n\nexport class DynamicSliderModel extends DynamicFormValueControlModel<number> {\n\n    @serializable() max: number | null;\n    @serializable() min: number | null;\n    @serializable() step: number | null;\n    @serializable() vertical: boolean;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_SLIDER;\n\n    constructor(config: DynamicSliderModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.max = typeof config.max === \"number\" ? config.max : 10;\n        this.min = typeof config.min === \"number\" ? config.min : 0;\n        this.step = typeof config.step === \"number\" ? config.step : 1;\n        this.vertical = typeof config.vertical === \"boolean\" ? config.vertical : false;\n    }\n}","import { DynamicCheckControlModel, DynamicCheckControlModelConfig } from \"../dynamic-check-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_SWITCH = \"SWITCH\";\n\nexport interface DynamicSwitchModelConfig extends DynamicCheckControlModelConfig {\n\n    offLabel?: string;\n    onLabel?: string;\n}\n\nexport class DynamicSwitchModel extends DynamicCheckControlModel {\n\n    @serializable() offLabel: string | null;\n    @serializable() onLabel: string | null;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_SWITCH;\n\n    constructor(config: DynamicSwitchModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.offLabel = config.offLabel || null;\n        this.onLabel = config.onLabel || null;\n    }\n}","import { DynamicInputControlModel, DynamicInputControlModelConfig } from \"../dynamic-input-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA = \"TEXTAREA\";\n\nexport const DYNAMIC_FORM_TEXTAREA_WRAP_HARD = \"hard\";\nexport const DYNAMIC_FORM_TEXTAREA_WRAP_SOFT = \"soft\";\n\nexport interface DynamicTextAreaModelConfig extends DynamicInputControlModelConfig<string> {\n\n    cols?: number;\n    rows?: number;\n    wrap?: string;\n}\n\nexport class DynamicTextAreaModel extends DynamicInputControlModel<string> {\n\n    @serializable() cols: number;\n    @serializable() rows: number;\n    @serializable() wrap: string;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA;\n\n    constructor(config: DynamicTextAreaModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.cols = typeof config.cols === \"number\" ? config.cols : 20;\n        this.rows = typeof config.rows === \"number\" ? config.rows : 2;\n        this.wrap = config.wrap || DYNAMIC_FORM_TEXTAREA_WRAP_SOFT;\n    }\n}","import { DynamicDateControlModel, DynamicDateControlModelConfig } from \"../dynamic-date-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER = \"TIMEPICKER\";\n\nexport interface DynamicTimePickerModelConfig extends DynamicDateControlModelConfig {\n\n    meridian?: boolean;\n    showSeconds?: boolean;\n}\n\nexport class DynamicTimePickerModel extends DynamicDateControlModel {\n\n    @serializable() meridian: boolean;\n    @serializable() showSeconds: boolean;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER;\n\n    constructor(config: DynamicTimePickerModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.meridian = typeof config.meridian === \"boolean\" ? config.meridian : false;\n        this.showSeconds = typeof config.showSeconds === \"boolean\" ? config.showSeconds : false;\n    }\n}","import { InjectionToken, Injectable, Inject, Optional } from \"@angular/core\";\nimport {\n    AbstractControl,\n    AsyncValidatorFn,\n    ValidatorFn,\n    Validators,\n    NG_VALIDATORS,\n    NG_ASYNC_VALIDATORS\n} from \"@angular/forms\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport {\n    DynamicValidatorDescriptor,\n    DynamicValidatorsConfig\n} from \"../model/misc/dynamic-form-control-validation.model\";\n\nexport type Validator = ValidatorFn | AsyncValidatorFn;\n\nexport type ValidatorFactory = (args: any) => Validator;\n\nexport type ValidatorsToken = Validator[];\n\nexport type ValidatorsMap = Map<string, Validator | ValidatorFactory>;\n\nexport const DYNAMIC_VALIDATORS = new InjectionToken<ValidatorsMap>(\"DYNAMIC_VALIDATORS\");\n\n@Injectable()\nexport class DynamicFormValidationService {\n\n    constructor(@Optional() @Inject(NG_VALIDATORS) private NG_VALIDATORS: ValidatorFn[],\n                @Optional() @Inject(NG_ASYNC_VALIDATORS) private NG_ASYNC_VALIDATORS: AsyncValidatorFn[],\n                @Optional() @Inject(DYNAMIC_VALIDATORS) private DYNAMIC_VALIDATORS: Map<string, Validator | ValidatorFactory>) {}\n\n\n    private getValidatorFn(validatorName: string, validatorArgs: any = null,\n                           validatorsToken: ValidatorsToken = this.NG_VALIDATORS): Validator | never {\n\n        let validatorFn: ValidatorFactory | Validator | undefined;\n\n        if (Validators.hasOwnProperty(validatorName)) { // Built-in Angular Validators\n\n            validatorFn = (Validators as any)[validatorName];\n\n        } else { // Custom Validators\n\n            if (this.DYNAMIC_VALIDATORS && this.DYNAMIC_VALIDATORS.has(validatorName)) {\n                validatorFn = this.DYNAMIC_VALIDATORS.get(validatorName);\n\n            } else if (validatorsToken) {\n                validatorFn = validatorsToken.find(validatorFn => validatorFn.name === validatorName);\n            }\n        }\n\n        if (validatorFn === undefined) { // throw when no validator could be resolved\n            throw new Error(`validator \"${validatorName}\" is not provided via NG_VALIDATORS, NG_ASYNC_VALIDATORS or DYNAMIC_FORM_VALIDATORS`);\n        }\n\n        if (validatorArgs !== null) {\n            return (validatorFn as ValidatorFactory)(validatorArgs);\n        }\n\n        return validatorFn as Validator;\n    }\n\n\n    private getValidatorFns(validatorsConfig: DynamicValidatorsConfig,\n                            validatorsToken: ValidatorsToken = this.NG_VALIDATORS): Validator[] {\n\n        let validatorFns: Validator[] = [];\n\n        if (validatorsConfig && typeof validatorsConfig === \"object\") {\n\n            validatorFns = Object.keys(validatorsConfig).map(validatorConfigKey => {\n\n                let validatorConfigValue = validatorsConfig[validatorConfigKey];\n\n                if (this.isValidatorDescriptor(validatorConfigValue)) {\n\n                    let descriptor = validatorConfigValue as DynamicValidatorDescriptor;\n\n                    return this.getValidatorFn(descriptor.name, descriptor.args, validatorsToken);\n                }\n\n                return this.getValidatorFn(validatorConfigKey, validatorConfigValue, validatorsToken);\n            });\n        }\n\n        return validatorFns;\n    }\n\n\n    private parseErrorMessageConfig(template: string, model: DynamicFormControlModel, error: any = null): string {\n\n        return template.replace(/{{\\s*(.+?)\\s*}}/mg, (_match: string, expression: string) => {\n\n            let propertySource: any = model,\n                propertyName: string = expression;\n\n            if (expression.indexOf(\"validator.\") >= 0 && error) {\n\n                propertySource = error;\n                propertyName = expression.replace(\"validator.\", \"\");\n            }\n\n            return propertySource[propertyName] ? propertySource[propertyName] : null;\n        });\n    }\n\n\n    getValidator(validatorName: string, validatorArgs: any = null): ValidatorFn {\n        return this.getValidatorFn(validatorName, validatorArgs) as ValidatorFn;\n    }\n\n\n    getAsyncValidator(validatorName: string, validatorArgs: any = null): AsyncValidatorFn {\n        return this.getValidatorFn(validatorName, validatorArgs, this.NG_ASYNC_VALIDATORS) as AsyncValidatorFn;\n    }\n\n\n    getValidators(validatorsConfig: DynamicValidatorsConfig): ValidatorFn[] {\n        return this.getValidatorFns(validatorsConfig) as ValidatorFn[];\n    }\n\n\n    getAsyncValidators(asyncValidatorsConfig: DynamicValidatorsConfig): AsyncValidatorFn[] {\n        return this.getValidatorFns(asyncValidatorsConfig, this.NG_ASYNC_VALIDATORS) as AsyncValidatorFn[];\n    }\n\n\n    updateValidators(validatorsConfig: DynamicValidatorsConfig | null, control: AbstractControl,\n                     model: DynamicFormControlModel): void {\n\n        model.validators = validatorsConfig;\n\n        if (validatorsConfig === null) {\n\n            control.clearValidators();\n\n        } else {\n            control.setValidators(this.getValidators(validatorsConfig));\n        }\n    }\n\n\n    updateAsyncValidators(asyncValidatorsConfig: DynamicValidatorsConfig | null, control: AbstractControl,\n                          model: DynamicFormControlModel): void {\n\n        model.asyncValidators = asyncValidatorsConfig;\n\n        if (asyncValidatorsConfig === null) {\n\n            control.clearAsyncValidators();\n\n        } else {\n            control.setAsyncValidators(this.getAsyncValidators(asyncValidatorsConfig));\n        }\n    }\n\n\n    createErrorMessages(control: AbstractControl, model: DynamicFormControlModel): string[] {\n\n        let messages: string[] = [];\n\n        if (typeof model.errorMessages === \"object\" && model.errorMessages !== null) {\n\n            let messagesConfig = model.errorMessages as DynamicValidatorsConfig;\n\n            Object.keys(control.errors || {}).forEach(validationErrorKey => {\n\n                let messageKey = validationErrorKey;\n\n                if (validationErrorKey === \"minlength\" || validationErrorKey === \"maxlength\") {\n                    messageKey = messageKey.replace(\"length\", \"Length\");\n                }\n\n                if (messagesConfig.hasOwnProperty(messageKey)) {\n\n                    let validationError = control.getError(validationErrorKey),\n                        messageTemplate = messagesConfig[messageKey] as string;\n\n                    messages.push(this.parseErrorMessageConfig(messageTemplate, model, validationError));\n                }\n            });\n        }\n\n        return messages;\n    }\n\n\n    isFormHook(value: any): boolean {\n        return typeof value === \"string\" && [\"blur\", \"change\", \"submit\"].indexOf(value) !== -1;\n    }\n\n\n    isValidatorDescriptor(value: any): boolean {\n\n        if (value !== null && typeof value === \"object\") {\n            return value.hasOwnProperty(\"name\") && value.hasOwnProperty(\"args\");\n        }\n\n        return false;\n    }\n}","import { Injectable } from \"@angular/core\";\nimport { AbstractControl, FormArray, FormControl, FormGroup } from \"@angular/forms\";\nimport { AbstractControlOptions, FormHooks } from \"@angular/forms/src/model\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport { DynamicFormValueControlModel } from \"../model/dynamic-form-value-control.model\";\nimport {\n    DynamicFormArrayModel,\n    DYNAMIC_FORM_CONTROL_TYPE_ARRAY,\n    DynamicFormArrayGroupModel\n} from \"../model/form-array/dynamic-form-array.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_GROUP, DynamicFormGroupModel } from \"../model/form-group/dynamic-form-group.model\";\nimport {\n    DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP,\n    DynamicCheckboxGroupModel\n} from \"../model/checkbox/dynamic-checkbox-group.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX, DynamicCheckboxModel } from \"../model/checkbox/dynamic-checkbox.model\";\nimport {\n    DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER,\n    DynamicColorPickerModel\n} from \"../model/colorpicker/dynamic-colorpicker.model\";\nimport {\n    DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER,\n    DynamicDatePickerModel\n} from \"../model/datepicker/dynamic-datepicker.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_EDITOR, DynamicEditorModel } from \"../model/editor/dynamic-editor.model\";\nimport {\n    DYNAMIC_FORM_CONTROL_TYPE_FILE_UPLOAD,\n    DynamicFileUploadModel\n} from \"../model/file-upload/dynamic-file-upload.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_INPUT, DynamicInputModel } from \"../model/input/dynamic-input.model\";\nimport {\n    DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP,\n    DynamicRadioGroupModel\n} from \"../model/radio/dynamic-radio-group.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_RATING, DynamicRatingModel } from \"../model/rating/dynamic-rating.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_SELECT, DynamicSelectModel } from \"../model/select/dynamic-select.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_SLIDER, DynamicSliderModel } from \"../model/slider/dynamic-slider.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_SWITCH, DynamicSwitchModel } from \"../model/switch/dynamic-switch.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA, DynamicTextAreaModel } from \"../model/textarea/dynamic-textarea.model\";\nimport {\n    DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER,\n    DynamicTimePickerModel\n} from \"../model/timepicker/dynamic-timepicker.model\";\nimport { DynamicFormValidationService } from \"./dynamic-form-validation.service\";\nimport { DynamicPathable } from \"../model/misc/dynamic-form-control-path.model\";\nimport { DynamicValidatorsConfig } from \"../model/misc/dynamic-form-control-validation.model\";\nimport { JSONUtils } from \"../utils/json.utils\";\n\nexport type DynamicFormModel = DynamicFormControlModel[] | DynamicFormGroupModel;\n\n@Injectable()\nexport class DynamicFormService {\n\n    constructor(private validationService: DynamicFormValidationService) {}\n\n\n    private createAbstractControlOptions(validatorsConfig: DynamicValidatorsConfig | null = null,\n                                         asyncValidatorsConfig: DynamicValidatorsConfig | null = null,\n                                         updateOn: FormHooks | null = null): AbstractControlOptions {\n\n        return {\n\n            asyncValidators: asyncValidatorsConfig !== null ? this.validationService.getAsyncValidators(asyncValidatorsConfig) : null,\n\n            validators: validatorsConfig !== null ? this.validationService.getValidators(validatorsConfig) : null,\n\n            updateOn: updateOn !== null && this.validationService.isFormHook(updateOn) ? updateOn : \"change\"\n        };\n    }\n\n\n    createFormArray(formArrayModel: DynamicFormArrayModel): FormArray {\n\n        let controls: AbstractControl[] = [],\n            options = this.createAbstractControlOptions(formArrayModel.validators, formArrayModel.asyncValidators,\n                formArrayModel.updateOn);\n\n        for (let index = 0; index < formArrayModel.size; index++) {\n\n            let groupModel = formArrayModel.get(index),\n                groupOptions = this.createAbstractControlOptions(formArrayModel.groupValidators,\n                    formArrayModel.groupAsyncValidators, formArrayModel.updateOn);\n\n            controls.push(this.createFormGroup(groupModel.group, groupOptions, groupModel));\n        }\n\n        return new FormArray(controls, options);\n    }\n\n\n    createFormGroup(formModel: DynamicFormControlModel[], options: AbstractControlOptions | null = null,\n                    parent: DynamicPathable | null = null): FormGroup {\n\n        let controls: { [controlId: string]: AbstractControl; } = {};\n\n        formModel.forEach(model => {\n\n            model.parent = parent;\n\n            switch (model.type) {\n\n                case DYNAMIC_FORM_CONTROL_TYPE_ARRAY:\n\n                    controls[model.id] = this.createFormArray(model as DynamicFormArrayModel);\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_GROUP:\n                case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP:\n\n                    let groupModel = model as DynamicFormGroupModel,\n                        groupOptions = this.createAbstractControlOptions(groupModel.validators,\n                            groupModel.asyncValidators, groupModel.updateOn);\n\n                    controls[model.id] = this.createFormGroup(groupModel.group, groupOptions, groupModel);\n                    break;\n\n                default:\n\n                    let controlModel = model as DynamicFormValueControlModel<any>,\n                        controlState = {value: controlModel.value, disabled: controlModel.disabled},\n                        controlOptions = this.createAbstractControlOptions(controlModel.validators,\n                            controlModel.asyncValidators, controlModel.updateOn);\n\n                    controls[model.id] = new FormControl(controlState, controlOptions);\n            }\n        });\n\n        return new FormGroup(controls, options);\n    }\n\n\n    getPathSegment(model: DynamicPathable): string {\n\n        return model instanceof DynamicFormArrayGroupModel ? model.index.toString() : (model as DynamicFormControlModel).id;\n    }\n\n\n    getPath(model: DynamicPathable): string[] {\n\n        let path = [this.getPathSegment(model)],\n            parent = model.parent;\n\n        while (parent) {\n\n            path.unshift(this.getPathSegment(parent));\n            parent = parent.parent;\n        }\n\n        return path;\n    }\n\n\n    addFormGroupControl(formGroup: FormGroup, formModel: DynamicFormModel, ...models: DynamicFormControlModel[]): void {\n\n        if (formModel instanceof DynamicFormGroupModel) {\n\n            this.insertFormGroupControl(formModel.size(), formGroup, formModel, ...models);\n\n        } else {\n\n            let _formModel = formModel as DynamicFormControlModel[];\n            this.insertFormGroupControl(_formModel.length, formGroup, _formModel, ...models);\n        }\n    }\n\n\n    moveFormGroupControl(index: number, step: number, formModel: DynamicFormModel): void {\n\n        if (formModel instanceof DynamicFormGroupModel) {\n\n            formModel.move(index, step);\n\n        } else {\n\n            let _formModel = formModel as DynamicFormControlModel[];\n            _formModel.splice(index + step, 0, ..._formModel.splice(index, 1));\n        }\n    }\n\n\n    insertFormGroupControl(index: number, formGroup: FormGroup, formModel: DynamicFormModel,\n                           ...models: DynamicFormControlModel[]): void {\n\n        let parent = formModel instanceof DynamicFormGroupModel ? formModel : null,\n            controls = this.createFormGroup(models, null, parent).controls;\n\n        Object.keys(controls).forEach((controlName, idx) => {\n\n            let controlModel = models[idx];\n\n            if (formModel instanceof DynamicFormGroupModel) {\n                formModel.insert(index, controlModel);\n\n            } else {\n                (formModel as DynamicFormControlModel[]).splice(index, 0, controlModel);\n            }\n\n            formGroup.addControl(controlName, controls[controlName]);\n        });\n    }\n\n\n    removeFormGroupControl(index: number, formGroup: FormGroup, formModel: DynamicFormModel): void {\n\n        if (formModel instanceof DynamicFormGroupModel) {\n\n            formGroup.removeControl(formModel.get(index).id);\n            formModel.remove(index);\n\n        } else {\n\n            formGroup.removeControl(formModel[index].id);\n            (formModel as DynamicFormControlModel[]).splice(index, 1);\n        }\n    }\n\n\n    addFormArrayGroup(formArray: FormArray, formArrayModel: DynamicFormArrayModel): void {\n\n        let groupModel = formArrayModel.addGroup();\n\n        formArray.push(this.createFormGroup(groupModel.group, null, groupModel));\n    }\n\n\n    insertFormArrayGroup(index: number, formArray: FormArray, formArrayModel: DynamicFormArrayModel): void {\n\n        let groupModel = formArrayModel.insertGroup(index);\n\n        formArray.insert(index, this.createFormGroup(groupModel.group, null, groupModel));\n    }\n\n\n    moveFormArrayGroup(index: number, step: number, formArray: FormArray, formArrayModel: DynamicFormArrayModel): void {\n\n        let newIndex = index + step,\n            moveUp = step >= 0;\n\n        if ((index >= 0 && index < formArrayModel.size) && (newIndex >= 0 && newIndex < formArrayModel.size)) {\n\n            let movingGroups: AbstractControl[] = [];\n\n            for (let i = moveUp ? index : newIndex; i <= (moveUp ? newIndex : index); i++) {\n                movingGroups.push(formArray.at(i));\n            }\n\n            movingGroups.forEach((formControl, idx) => {\n\n                let position;\n\n                if (moveUp) {\n                    position = idx === 0 ? newIndex : index + idx - 1;\n\n                } else {\n                    position = idx === movingGroups.length - 1 ? newIndex : newIndex + idx + 1;\n                }\n\n                formArray.setControl(position, formControl);\n            });\n\n            formArrayModel.moveGroup(index, step);\n\n        } else {\n            throw new Error(`form array group cannot be moved due to index or new index being out of bounds`);\n        }\n    }\n\n\n    removeFormArrayGroup(index: number, formArray: FormArray, formArrayModel: DynamicFormArrayModel): void {\n\n        formArray.removeAt(index);\n        formArrayModel.removeGroup(index);\n    }\n\n\n    clearFormArray(formArray: FormArray, formArrayModel: DynamicFormArrayModel): void {\n\n        while (formArray.length > 0) {\n            this.removeFormArrayGroup(0, formArray, formArrayModel);\n        }\n    }\n\n\n    findById(id: string, formModel: DynamicFormControlModel[]): DynamicFormControlModel | null {\n\n        let result = null,\n            findByIdFn = (id: string, groupModel: DynamicFormControlModel[]): void => {\n\n                for (let controlModel of groupModel) {\n\n                    if (controlModel.id === id) {\n                        result = controlModel;\n                        break;\n                    }\n\n                    if (controlModel instanceof DynamicFormGroupModel) {\n                        findByIdFn(id, (controlModel as DynamicFormGroupModel).group);\n                    }\n                }\n            };\n\n        findByIdFn(id, formModel);\n\n        return result;\n    }\n\n\n    fromJSON(json: string | object[]): DynamicFormControlModel[] | never {\n\n        let formModelJSON = typeof json === \"string\" ? JSON.parse(json, JSONUtils.parseReviver) : json,\n            formModel: DynamicFormControlModel[] = [];\n\n        formModelJSON.forEach((model: any) => {\n\n            let layout = model.layout || model.cls || null;\n\n            switch (model.type) {\n\n                case DYNAMIC_FORM_CONTROL_TYPE_ARRAY:\n                    let formArrayModel = model as DynamicFormArrayModel;\n\n                    if (Array.isArray(formArrayModel.groups)) {\n\n                        formArrayModel.groups.forEach((groupModel: DynamicFormArrayGroupModel) => {\n                            groupModel.group = this.fromJSON(groupModel.group) as DynamicFormControlModel[];\n                        });\n                    }\n\n                    formArrayModel.groupFactory = () => {\n                        return this.fromJSON(formArrayModel.groupPrototype);\n                    };\n\n                    formModel.push(new DynamicFormArrayModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX:\n                    formModel.push(new DynamicCheckboxModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP:\n                    model.group = this.fromJSON(model.group) as DynamicCheckboxModel[];\n                    formModel.push(new DynamicCheckboxGroupModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER:\n                    formModel.push(new DynamicColorPickerModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER:\n                    formModel.push(new DynamicDatePickerModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_EDITOR:\n                    formModel.push(new DynamicEditorModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_FILE_UPLOAD:\n                    model.value = null;\n                    formModel.push(new DynamicFileUploadModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_GROUP:\n                    model.group = this.fromJSON(model.group);\n                    formModel.push(new DynamicFormGroupModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_INPUT:\n                    let inputModel = model as DynamicInputModel;\n\n                    if (inputModel.mask !== null) {\n                        inputModel.mask = JSONUtils.maskFromString(inputModel.mask as string);\n                    }\n\n                    formModel.push(new DynamicInputModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP:\n                    formModel.push(new DynamicRadioGroupModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_RATING:\n                    formModel.push(new DynamicRatingModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_SELECT:\n                    formModel.push(new DynamicSelectModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_SLIDER:\n                    formModel.push(new DynamicSliderModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_SWITCH:\n                    formModel.push(new DynamicSwitchModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA:\n                    formModel.push(new DynamicTextAreaModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER:\n                    formModel.push(new DynamicTimePickerModel(model, layout));\n                    break;\n\n                default:\n                    throw new Error(`unknown form control model type defined on JSON object with id \"${model.id}\"`);\n            }\n        });\n\n        return formModel;\n    }\n}","import { Inject, Injectable, InjectionToken, Optional, QueryList, Type } from \"@angular/core\";\nimport {\n    DynamicFormControlLayout,\n    DynamicFormControlLayoutConfig,\n    DynamicFormControlLayoutContext,\n    DynamicFormControlLayoutPlace\n} from \"../model/misc/dynamic-form-control-layout.model\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport { DynamicFormControl } from \"../component/dynamic-form-control.interface\";\nimport {\n    DynamicTemplateDirective,\n    DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT\n} from \"../directive/dynamic-template.directive\";\n\nexport type DynamicFormLayout = { [id: string]: DynamicFormControlLayout };\n\nexport type DynamicFormControlMapFn = (model: DynamicFormControlModel) => Type<DynamicFormControl> | null;\n\nexport type DynamicFormControlTemplates = QueryList<DynamicTemplateDirective> | DynamicTemplateDirective[] | undefined;\n\nexport const DYNAMIC_FORM_CONTROL_MAP_FN = new InjectionToken<DynamicFormControlMapFn>(\"DYNAMIC_FORM_CONTROL_MAP_FN\");\n\n@Injectable()\nexport class DynamicFormLayoutService {\n\n    constructor(@Inject(DYNAMIC_FORM_CONTROL_MAP_FN) @Optional() private readonly DYNAMIC_FORM_CONTROL_MAP_FN: any) {\n        this.DYNAMIC_FORM_CONTROL_MAP_FN = DYNAMIC_FORM_CONTROL_MAP_FN as DynamicFormControlMapFn;\n    }\n\n    findById(id: string, formLayout: DynamicFormLayout | null): DynamicFormControlLayout | null {\n\n        if (formLayout !== null && typeof formLayout === \"object\") {\n\n            for (let key of Object.keys(formLayout)) {\n\n                if (key === id) {\n                    return formLayout[key];\n                }\n            }\n        }\n\n        return null;\n    }\n\n    filterTemplatesByModel(model: DynamicFormControlModel, templates: DynamicFormControlTemplates): DynamicTemplateDirective[] {\n\n        const filterCallback: (template: DynamicTemplateDirective) => boolean = (template: DynamicTemplateDirective) => {\n            return template.modelId === model.id || template.modelType === model.type;\n        };\n\n        if (templates instanceof QueryList) {\n            return templates.filter(filterCallback);\n\n        } else if (Array.isArray(templates)) {\n            return templates.filter(filterCallback);\n        }\n\n        return [];\n    }\n\n    getAlignedTemplate(model: DynamicFormControlModel, templates: DynamicFormControlTemplates, alignment: DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT): DynamicTemplateDirective | undefined {\n\n        return this.filterTemplatesByModel(model, templates)\n            .find(template => template.as === null && template.align === alignment);\n    }\n\n    getStartTemplate(model: DynamicFormControlModel, templates: DynamicFormControlTemplates): DynamicTemplateDirective | undefined {\n        return this.getAlignedTemplate(model, templates, DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT.Start);\n    }\n\n    getEndTemplate(model: DynamicFormControlModel, templates: DynamicFormControlTemplates): DynamicTemplateDirective | undefined {\n        return this.getAlignedTemplate(model, templates, DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT.End);\n    }\n\n    getClass(layout: DynamicFormControlLayout | null, context: DynamicFormControlLayoutContext, place: DynamicFormControlLayoutPlace): string {\n\n        if (layout !== null && layout.hasOwnProperty(context)) {\n\n            let config = layout[context] as DynamicFormControlLayoutConfig;\n\n            if (config.hasOwnProperty(place)) {\n                return config[place] as string;\n            }\n        }\n\n        return \"\";\n    }\n\n    getCustomComponentType(model: DynamicFormControlModel): Type<DynamicFormControl> | null {\n\n        if (this.DYNAMIC_FORM_CONTROL_MAP_FN) {\n            return this.DYNAMIC_FORM_CONTROL_MAP_FN(model);\n        }\n\n        return null;\n    }\n}","import { CommonModule } from \"@angular/common\";\nimport { NgModule, ModuleWithProviders } from \"@angular/core\";\nimport { ReactiveFormsModule } from \"@angular/forms\";\nimport { DynamicFormService } from \"./service/dynamic-form.service\";\nimport { DynamicFormLayoutService } from \"./service/dynamic-form-layout.service\";\nimport { DynamicFormValidationService } from \"./service/dynamic-form-validation.service\";\nimport { DynamicIdDirective } from \"./directive/dynamic-id.directive\";\nimport { DynamicTemplateDirective } from \"./directive/dynamic-template.directive\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ReactiveFormsModule\n    ],\n    declarations: [\n        DynamicIdDirective,\n        DynamicTemplateDirective\n    ],\n    exports: [\n        DynamicIdDirective,\n        DynamicTemplateDirective\n    ]\n})\nexport class DynamicFormsCoreModule {\n\n    static forRoot(): ModuleWithProviders {\n\n        return {\n\n            ngModule: DynamicFormsCoreModule,\n\n            providers: [\n                DynamicFormService,\n                DynamicFormLayoutService,\n                DynamicFormValidationService\n            ]\n        };\n    }\n}"],"names":["DynamicFormControlComponent","layoutService","validationService","this","Object","group","get","model","id","createErrorMessages","control","_hasFocus","invalid","valid","hasErrorMessages","touched","hasFocus","isInvalid","context","place","controlLayout","layout","getClass","$event","Event","stopPropagation","blur","emit","change","onChange","valueUpdates","next","checked","type","bypass","emitter","customEvent","customEventType","focus","DynamicFormArrayComponent","__extends","getStartTemplate","templates","getEndTemplate","hasOwnProperty","DynamicFormComponent","formService","_index","findById","formLayout","DynamicFormControlEventType","Blur","Change","Focus","Custom","extendStatics","setPrototypeOf","__proto__","Array","d","b","p","__","constructor","prototype","create","config","Promise","value","closed","isObject","errorObject","tryCatchTarget","fn","UnsubscriptionError","_super","_this","name","tslib_1.__extends","Subscription","unsubscribe","errors","hasErrors","_parent","_parents","index","isFunction","e","isArray","_subscriptions","len","sub","err","teardown","subscription","subscriptions","subscriptionIndex","indexOf","parent","Subscriber","destination","isTrustedSubscriber","destinationOrNext","syncErrorThrowable","error","subscriber","isStopped","_next","_error","_complete","SafeSubscriber","observerOrNext","complete","_context","_parentSubscriber","useDeprecatedSynchronousErrorHandling","__tryOrSetError","__tryOrUnsub","syncErrorValue","wrappedComplete","syncErrorThrown","hostReportError","Observable","subscribe","lift","operator","observable","source","sink","nextOrObserver","_subscribe","forEach","promiseCtor","reject","operations","length","fns","input","toPromise","getPromiseCtor","ObjectUnsubscribedError","SubjectSubscription","subject","observers","subscriberIndex","SubjectSubscriber","Subject","i","hasError","thrownError","asObservable","AnonymousSubject","scheduler","array","add","args","result","_isScalar","MapOperator","project","MapSubscriber","thisArg","count","METADATA_KEY_SERIALIZABLE","target","key","Reflect","defineMetadata","serializables","metadata","getMetadata","push","getSerializables","reduce","prev","prop","asyncValidators","errorMessages","hidden","label","labelTooltip","controlTooltip","relation","updateOn","validators","disabled","disabledUpdates","DynamicFormControlModel","_disabled","serialize","serializable","additional","hint","required","tabIndex","undefined","DynamicFormValueControlModel","_value","defaultValue","$implicit","DynamicFormArrayGroupModel","DYNAMIC_FORM_CONTROL_TYPE_ARRAY","groupFactory","Error","groupAsyncValidators","groupPrototype","groupValidators","initialCount","groups","arrayGroup","addGroup","DynamicFormArrayModel","insertGroup","splice","updateGroupIndex","step","_a","labelPosition","DynamicCheckControlModel","DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX","indeterminate","AUTOCOMPLETE_ON","AUTOFILL_TOKENS_ADDRESS","AUTOFILL_TOKENS_CONTACT","AUTOFILL_FIELDS","AUTOFILL_FIELDS_CONTACT","AutoFillUtils","token","startsWith","tokens","toExpression","total","currentValue","tokensAddress","tokensContact","fields","fieldsContact","RegExp","test","autoComplete","autoFocus","maxLength","minLength","placeholder","prefix","readOnly","spellCheck","suffix","JSONUtils","mask","toString","map","maskToString","endsWith","slice","maskFromString","_key","Date","DYNAMIC_FORM_CONTROL_TYPE_INPUT","DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEXT","accept","inputType","list","max","min","multiple","pattern","_listId","DynamicInputModel","json","toJSON","DynamicInputControlModel","RelationUtils","relGroups","rel","find","action","controlGroup","controls","relGroup","when","some","controlElement","_formGroup","formGroup","toBeDisabled","connective","status","DynamicFormControlContainerComponent","componentFactoryResolver","changes","groupChange","modelChange","destroyFormControlComponent","createFormControlComponent","valueChanges","onControlValueChanges","onModelDisabledUpdates","onModelValueUpdates","setControlRelations","inputTemplateList","contentTemplateList","componentType","componentFactory","resolveComponentFactory","componentViewContainerRef","clear","componentRef","createComponent","instance","bindId","componentSubscriptions","onBlur","onFocus","onCustomEvent","destroy","relActivation","findActivationRelation","rel_1","updateModelDisabled","getRelatedFormControls","statusChanges","isFormControlToBeDisabled","setValue","disable","enable","inputElement","srcElement","files","createDynamicFormControlEvent","isDynamicFormControlEvent","DynamicTemplateableFormControlComponent","filterTemplatesByModel","template","bindTemplate","as","templateDirectives","has","property","viewChild","mapTemplate","templateRef","DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT","End","Directive","selector","TemplateRef","Input","elementRef","renderer","DynamicIdDirective","dynamicId","setAttribute","nativeElement","ElementRef","Renderer2","format","DynamicFormOption","text","options","DynamicOptionControlModel","options$","of","_options","optionConfig","updateOptions$","pipe","optionsConfig","insert","option","_i","indices","DYNAMIC_FORM_CONTROL_TYPE_GROUP","legend","DynamicFormGroupModel","controlModel","DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP","DynamicCheckboxGroupModel","DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER","inline","DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER","focusedDate","toggleIcon","toggleLabel","DynamicDateControlModel","DYNAMIC_FORM_CONTROL_TYPE_EDITOR","DYNAMIC_FORM_CONTROL_TYPE_FILE_UPLOAD","autoUpload","maxSize","minSize","removeUrl","showFileList","url","DynamicFileControlModel","DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP","DynamicRadioGroupModel","DYNAMIC_FORM_CONTROL_TYPE_RATING","DYNAMIC_FORM_CONTROL_TYPE_SELECT","filterable","DynamicSelectModel","DYNAMIC_FORM_CONTROL_TYPE_SLIDER","vertical","DYNAMIC_FORM_CONTROL_TYPE_SWITCH","offLabel","onLabel","DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA","DYNAMIC_FORM_TEXTAREA_WRAP_SOFT","cols","rows","wrap","DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER","meridian","showSeconds","DYNAMIC_VALIDATORS","InjectionToken","NG_VALIDATORS","NG_ASYNC_VALIDATORS","DynamicFormValidationService","validatorName","validatorArgs","validatorsToken","validatorFn","Validators","validatorsConfig","validatorFns","keys","validatorConfigKey","validatorConfigValue","isValidatorDescriptor","descriptor","getValidatorFn","replace","_match","expression","propertySource","propertyName","getValidatorFns","asyncValidatorsConfig","clearValidators","setValidators","getValidators","clearAsyncValidators","setAsyncValidators","getAsyncValidators","messages","messagesConfig_1","validationErrorKey","messageKey","validationError","getError","messageTemplate","parseErrorMessageConfig","Injectable","Optional","Inject","Map","DynamicFormService","isFormHook","formArrayModel","createAbstractControlOptions","size","groupModel","groupOptions","createFormGroup","FormArray","formModel","createFormArray","controlState","controlOptions","FormControl","FormGroup","path","getPathSegment","unshift","models","insertFormGroupControl","_formModel","move","controlName","idx","addControl","removeControl","remove","formArray","newIndex","moveUp","movingGroups_1","at","formControl","position","setControl","moveGroup","removeAt","removeGroup","removeFormArrayGroup","findByIdFn","groupModel_1","JSON","parse","parseReviver","cls","formArrayModel_1","fromJSON","DynamicCheckboxModel","DynamicColorPickerModel","DynamicDatePickerModel","DynamicEditorModel","DynamicFileUploadModel","inputModel","DynamicRatingModel","DynamicSliderModel","DynamicSwitchModel","DynamicTextAreaModel","DynamicTimePickerModel","DYNAMIC_FORM_CONTROL_MAP_FN","DynamicFormLayoutService","filterCallback","modelId","modelType","QueryList","filter","alignment","align","getAlignedTemplate","Start","DynamicFormsCoreModule","ngModule","providers","NgModule","imports","CommonModule","ReactiveFormsModule","declarations","DynamicTemplateDirective","exports"],"mappings":";;;;;;;;;;;;;;;;4XAkBAA,aAeI,WAAgCC,EACAC,GADAC,mBAAAF,EACAE,uBAAAD,kBAdH,SAgB7BE,sBAAIJ,2BAAJ,WACI,OAAOG,KAAKE,MAAMC,IAAIH,KAAKI,MAAMC,qCAGrCJ,sBAAIJ,iCAAJ,WACI,OAAOG,KAAKD,kBAAkBO,oBAAoBN,KAAKO,QAASP,KAAKI,wCAGzEH,sBAAIJ,4BAAJ,WACI,OAAOG,KAAKQ,2CAGhBP,sBAAIJ,6BAAJ,WACI,OAAOG,KAAKO,QAAQE,yCAGxBR,sBAAIJ,2BAAJ,WACI,OAAOG,KAAKO,QAAQG,uCAGxBT,sBAAIJ,qCAAJ,WACI,OAAOG,KAAKI,MAAMO,kBAAoBX,KAAKO,QAAQK,UAAYZ,KAAKa,UAAYb,KAAKc,2CAGzFjB,qBAAA,SAASkB,EAA0CC,EAAsCZ,gBAAAA,EAAiCJ,KAAKI,OAE3H,IAAIa,EAAiBjB,KAAKkB,QAAUlB,KAAKkB,OAAOd,EAAMC,KAAQD,EAAwC,OAEtG,OAAOJ,KAAKF,cAAcqB,SAASF,EAAeF,EAASC,IAG/DnB,mBAAA,SAAOuB,GAECA,aAAkBC,OAClBD,EAAOE,kBAGXtB,KAAKQ,WAAY,EACjBR,KAAKuB,KAAKC,KAAKJ,IAGnBvB,qBAAA,SAASuB,GAEDA,aAAkBC,OAClBD,EAAOE,kBAGXtB,KAAKyB,OAAOD,KAAKJ,IAGrBvB,qCAAA,SAAyBuB,EAAehB,GAEpCJ,KAAK0B,SAASN,GAEdhB,EAAMuB,aAAaC,KAAMR,SAAmCS,UAGhEhC,0BAAA,SAAcuB,EAAaU,EAA4BC,gBAA5BD,qBAA4BC,MAEnD,IAAIC,EAAUhC,KAA+D,YAEzE+B,EAEAC,EAAQR,KAAKJ,GAEU,iBAATU,GAEdE,EAAQR,MAAMS,YAAab,EAAQc,gBAAiBJ,KAI5DjC,oBAAA,SAAQuB,GAEAA,aAAkBC,OAClBD,EAAOE,kBAGXtB,KAAKQ,WAAY,EACjBR,KAAKmC,MAAMX,KAAKJ,4UC7GxBgB,iFAAwDC,OAKpDpC,sBAAImC,iCAAJ,WACI,OAAOpC,KAAKF,cAAcwC,iBAAiBtC,KAAKI,MAAOJ,KAAKuC,4CAGhEtC,sBAAImC,+BAAJ,WACI,OAAOpC,KAAKF,cAAc0C,eAAexC,KAAKI,MAAOJ,KAAKuC,+CAVV1C,WCDR,cAAiB,gBAAmB,eAAkB,oBAkB5DuB,GACtC,OAAkB,OAAXA,GAAqC,iBAAXA,GAAuBA,EAAOqB,eAAe,cCTlFC,aAcI,WAAgCC,EAA2C7C,GAA3CE,iBAAA2C,EAA2C3C,mBAAAF,SAE3E4C,sBAAA,SAAUE,EAAgBxC,GACtB,OAAOA,EAAMC,IAGjBqC,qBAAA,SAAStC,EAAgCW,EAA0CC,GAE/E,IAAIC,EAAgBjB,KAAKF,cAAc+C,SAASzC,EAAMC,GAAIL,KAAK8C,aAAe1C,EAAwC,OAEtH,OAAOJ,KAAKF,cAAcqB,SAASF,EAAeF,EAASC,IAG/D0B,oBAAA,SAAQtB,EAAiCU,GAErC,OAAQA,GAEJ,KAAKiB,EAA4BC,KAC7BhD,KAAKuB,KAAKC,KAAKJ,GACf,MAEJ,KAAK2B,EAA4BE,OAC7BjD,KAAKyB,OAAOD,KAAKJ,GACjB,MAEJ,KAAK2B,EAA4BG,MAC7BlD,KAAKmC,MAAMX,KAAKJ,GAChB,MAEJ,KAAK2B,EAA4BI,OAC7BnD,KAAKiC,YAAYT,KAAKJ,UC1ClCgC,EAAgBnD,OAAOoD,iBACpBC,wBAA2BC,OAAS,SAAUC,EAAGC,GAAKD,EAAEF,UAAYG,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIC,KAAKD,EAAOA,EAAEhB,eAAeiB,KAAIF,EAAEE,GAAKD,EAAEC;;;;;;;;;;;;;;oFAElE,SAASrB,EAAUmB,EAAGC,GAEzB,SAASE,IAAO3D,KAAK4D,YAAcJ,EADnCJ,EAAcI,EAAGC,GAEjBD,EAAEK,UAAkB,OAANJ,EAAaxD,OAAO6D,OAAOL,IAAME,EAAGE,UAAYJ,EAAEI,UAAW,IAAIF,4CCjBnF,SAKSI,GAUPC,4DAEIC,sICjBJC,UACAtC,wCAEImC,wJCRQI,uHCQVC,8BAMFC,EAAsBC,QCXiBC,WAAKC,qBAMrCC,wJAJSA,WAMbA,EAAcC,yEAJjBC,iBCoCAC,2BAVU5E,eAEAA,kBAEFA,mBAONA,yBACS6E,yEAaT,IAEIC,EAFAC,SAGF/E,aAKF,6EACAA,KAAKkE,UACLlE,KAAKgF,aAGLhF,KAAKiF,cAELjF,6BACA,IAAIkF,uBAQFF,sCAIAG,2BAGEJ,aAEgCK,aAAab,2BAO/Cc,EAAQC,OACRJ,KAEAK,mBAEE,IAAIC,UACFrB,EAASqB,UACgBX,0BAEvBE,KACAD,QACA,IAAIW,MACFA,aAAelB,wCAUvBQ,oFA4BAW,qBAKF,mEAKMC,0EAGAA,sDAGA,SACAA,8KAYNA,qDAWA,IAAIC,yBACFA,GACA,IAAIC,oBACFA,sDAQJ,WAA4Bb,2BAGdA,eAOEc,QAAQC,2QC1MtB,iBCU6BC,WAAYxB,qBAwB5B,gCACAC,sBACAA,mBAAkB,EAEzBA,wBAgBRA,aAAkB,2BAGdA,EAAMwB,iCAGe,CACnBxB,EAAMwB,8CAMJC,MACA,MAAuBC,OACvB1B,EAAK2B,wCACL3B,8BAGAA,EAAK2B,6DAMT3B,EAAK2B,sBACL3B,EAAMwB,2CA/BZtB,OAvBOqB,eAEU,4CACmBK,KAClC,YAAgCzE,EAAMyE,YACtCC,sIA4EEtG,KAAKuG,WAAY,oEAajBvG,KAAKuG,WAAY,iCAKF1B,uBACf7E,cAGFA,gBAAM,mDAIWwG,wDAIAC,OAAS,YAC1BzG,KAAKiG,qDAIYS,qBACjB1G,KAAKiG,yFAML,IAAejB,sCACfhF,KAAKgF,aACLhF,KAAKiF,SAAW,KAChBjF,KAAK6E,cACL7E,KAAKkE,QAAS,EACdlE,KAAKuG,aACLvG,KAAKgF,UACLhF,4BAS4B2G,WAAanC,uBAIvB,IAOd5C,uBADJ6C,sBAGA,IAAI1D,EAAU0D,SACZU,aAGAvD,IAA6CA,KAC7CyE,EAAQO,QACRC,aACED,QAEEzB,GADFpE,qGAQJ0D,EAAKqC,WACLrC,EAAK+B,QACL/B,EAAKgC,OAASJ,yBA3BhB1B,wBA+B8B,4CAE1B,IAAIoC,uFAGG/G,uGAMYqG,sCAEX,IAAAU,yBACJC,6CACFhH,KAAKyG,gCAKHzG,KAAKiH,sDAHLjH,KAAKkH,aAAalH,gEAalBgH,GACAD,EAAkBI,uEAPpBnH,mBACEgH,kDAgBN,IAAIvC,2BAEF,IAAIsC,4BACF/G,gBAEA,IAAIoH,sBAA6CV,2FAK/C1G,KAAKiH,0CAHLjH,KAAKkH,aAAaE,gIAgBtBpH,mBACE+D,yDAQOF,mCAAsCkC,2HAO7ChC,EAAOiD,uCACPjB,EAAOoB,iBACPpB,EAAOsB,wBAGPC,uDASJ,IAAIP,yBACJ/G,KAAK8G,cACL9G,4MC7QFuH,2BACEvH,kBACEwH,0CA2BiBC,cAAoBC,GACvC,MAAiB,aACjBC,EAAWC,YACXD,sCA+H0B,gBAC1B,IAAMD,gBAEFG,qBC1LJC,MACEA,2BAIAA,mEDsLAJ,8BAIO1H,aAAgB+D,+DACrB/D,KAAK+H,qCAKPhE,yCACE8D,EAAKzB,qBACLyB,sBAA0B,EACxBA,iIAcF9D,0CACA8D,EAAKR,gEA+BVW,sBAjBC,sBAEAC,sBAIE,kDAKIC,KACEvC,gEAUR,MAAa3F,wCAsBN6D,wIAsCLsE,EAAkBC,uBEvSpBC,uBAIkBC,wEFsTnBC,sBANC,sBAEAN,sBAEE,iGA9RKnE,kDA2SJ0E,gFGvVsCC,WAAKjE,gBAEhC,sDAIbC,EAAcC,6EAFjBC,iBCJ0C+D,WAAYlE,mBAGnC,aAAmBxE,mBAASyE,UAAUkE,EAFzDlE,oCAEAE,8CAMI3E,aAKFA,aAAgB,EAChB,IAAM2I,eAEFC,iBAEJ5I,KAAK2I,uDAML,IAAIE,kCACFA,0BCvBoCC,WAAatE,iBAC/B,2DAAtBG,aAQ8BoE,WAAavE,gBAM3C,gCAEAC,eAEAA,UAAS,EAETA,eAEAA,YAAW,8BAEXE,uDAUQd,UAAU4D,iBAChB,8BACAkB,kBAII9E,8BACF7D,+CAIA,IAAM4I,iBACArD,IAAgB6C,mBAEfY,IAAOA,wBAMZnF,+BACF7D,wBAGFA,KAAKiJ,UAAW,EAChBjJ,KAAKkJ,cACGlJ,sBACR,IAAM4I,iBACArD,IAAgB6C,mBAEfY,qDAMHnF,iCACF7D,wBAGMA,sBACR,IAAM4I,iBACArD,IAAgB6C,mBAEfY,MAAWzD,iDAMd1B,UAAUgB,uBACd7E,KAAKuG,aACLvG,KAAKkE,QAAS,yBAKVL,uCACF7D,yEAQE6D,oCACF7D,oCAEUiJ,UACV3C,wCAEUC,WACVD,uBAGAtG,yCAKI6D,UAAUsF,wBACV,MAAkB,aACxBxB,iEAOqCyB,WAAU5E,mBAC3B,gCAEpBC,EAAKwB,kCAFPtB,oCAOE,IAAIsB,mBACFA,oDAMF,IAAIA,mBACFA,KAA2BI,uDAKV,WACnB,IAAIJ,mBACFA,KAA2BY,8LCrGbwC,2HCpDkBC,uEAGZA,0DCAX/B,aAAqBjB,GAC9B,IAAId,EAAM,MACNwD,EAAI,WACNO,IAAIF,sBACFL,cAIF1C,OAAgBgC,EAAMU,QACR9E,gCAJZoC,gGCOR,MAAI+C,EAAYG,IAAUpB,2IClBxBqB,oBACAnD,EAAW1E,8BAGZ6H,EAAeC,aAChBD,EAAOxF,8DC0CP0F,6BAAqE3J,aAAA4J,oHAarCC,WAAarF,kBAO1BsF,GAFC,aAAuC9J,qBAJ3DyE,UAAkBmF,EAOhBnF,EAAKsF,gCAJPpF,SAUiBd,4BACf,IAAI4F,4EAIFzJ,8DCjFOgK,EAA4B,0BAQZtF,GAEzB,OAAO,SAAUuF,EAAQC,GACrBC,QAAQC,eAAeJ,GAA4BE,IAAKA,EAAKxF,KAAMA,GAAQwF,GAAMD,EAAQC,eAIhED,GAE7B,IAAII,KAEJ,IAAK,IAAIH,KAAOD,EAAQ,CAEpB,IAAIK,EAAWH,QAAQI,YAAYP,EAA2BC,EAAQC,GAElEI,GACAD,EAAcG,KAAKF,GAI3B,OAAOD,aAGeJ,EAAapG,GAEnC,OAAO4G,EAAiB5G,GAAaoG,GAAQS,OAAO,SAACC,EAAWC,GAI5D,OAFAD,EAAKC,EAAKlG,MAAQuF,EAAOW,EAAKV,KAEvBS,2fCKX,WAAsB5G,EAAuC7C,gBAAAA,QAA7D,uBAPiC,KAS7BlB,KAAK6K,gBAAkB9G,EAAO8G,iBAAmB,KACjD7K,KAAK8K,cAAgB/G,EAAO+G,eAAiB,KAC7C9K,KAAK+K,OAAkC,kBAAlBhH,EAAOgH,QAAuBhH,EAAOgH,OAC1D/K,KAAKK,GAAK0D,EAAO1D,GACjBL,KAAKgL,MAAQjH,EAAOiH,OAAS,KAC7BhL,KAAKiL,aAAelH,EAAOkH,cAAgB,KAC3CjL,KAAKkL,eAAiBnH,EAAOmH,gBAAkB,KAC/ClL,KAAKkB,OAASA,EACdlB,KAAK0E,KAAOX,EAAOW,MAAQX,EAAO1D,GAClCL,KAAKmL,SAAW5H,MAAM8B,QAAQtB,EAAOoH,UAAYpH,EAAOoH,YACxDnL,KAAKoL,SAAsC,iBAApBrH,EAAOqH,SAAwBrH,EAAOqH,SAAW,KACxEpL,KAAKqL,WAAatH,EAAOsH,YAAc,KAEvCrL,KAAKsL,SAAsC,kBAApBvH,EAAOuH,UAAyBvH,EAAOuH,SAC9DtL,KAAKuL,gBAAkB,IAAIxC,EAC3B/I,KAAKuL,gBAAgB/D,UAAU,SAAA8D,GAAY,OAAA7G,EAAK6G,SAAWA,WAG/DrL,sBAAIuL,4BAAJ,WACI,OAAOxL,KAAKyL,eAGhB,SAAaxH,GACTjE,KAAKyL,UAAYxH,mCAGrBhE,sBAAIuL,oCAAJ,WACI,MAAqC,iBAAvBxL,KAAK8K,eAAqD,OAAvB9K,KAAK8K,+CAG1DU,mBAAA,WACI,OAAOE,EAAU1L,UAnDpB2L,sEACAA,EAAa,yEAEbA,oEACAA,8DACAA,yDACAA,4DACAA,mEACAA,qEACAA,6DACAA,2DAEAA,8DACAA,+DACAA,03BCjBD,WAAsB5H,EAA+C7C,GAArE,MAEIsD,YAAMT,EAAQ7C,gBAEduD,EAAKmH,WAA0C,iBAAtB7H,EAAO6H,YAAiD,OAAtB7H,EAAO6H,WAAsB7H,EAAO6H,WAAa,KAC5GnH,EAAKoH,KAAO9H,EAAO8H,MAAQ,KAC3BpH,EAAKqH,SAAsC,kBAApB/H,EAAO+H,UAAyB/H,EAAO+H,SAC9DrH,EAAKsH,SAAWhI,EAAOgI,UAAY,KAEnCtH,EAAKR,MAAyB,OAAjBF,EAAOE,YAAmC+H,IAAjBjI,EAAOE,MAAsBF,EAAOE,MAAQ,KAClFQ,EAAK9C,aAAe,IAAIoH,EACxBtE,EAAK9C,aAAa6F,UAAU,SAACvD,GAAa,OAAAQ,EAAKR,MAAQA,aApBD5B,OAuB1DpC,sBAAIgM,yBAIJ,WACI,OAAOjM,KAAKkM,YALhB,SAAUjI,GACNjE,KAAKkM,OAASjI,mCAOlBgI,0BAAA,SAAc/B,EAAaiC,GACvB,oBADuBA,QACI,OAApBnM,KAAK4L,YAAuB5L,KAAK4L,WAAWnJ,eAAeyH,GAAOlK,KAAK4L,WAAW1B,GAAOiC,OA9BnGR,mEACAA,6DACAA,kEACAA,iEACAA,EAAa,mEAN4CH,0zBCD1D,WAAYzK,EAAgCb,EAAuCgF,gBAAvChF,mBAAuCgF,GAAiB,GAEhGlF,KAAKoM,UAAYpM,KACjBA,KAAKe,QAAUA,EACff,KAAKE,MAAQA,EACbF,KAAKkF,MAAQA,SAGjBjF,sBAAIoM,0BAAJ,WACI,OAAOrM,KAAKe,yCAGhBsL,gBAAA,SAAInH,GACA,OAAOlF,KAAKE,MAAMgF,IAGtBmH,mBAAA,WACI,OAAOX,EAAU1L,WApBpB2L,6DACAA,+DAuBQW,GAAkC,uBAsB3C,WAAYvI,EAAqC7C,GAAjD,MAEIsD,YAAMT,EAAQ7C,SAEd,sBANoCoL,GAMD,mBAAxBvI,EAAOwI,aAGd,MAAM,IAAIC,MAAM,sEAQpB,GAVI/H,EAAK8H,aAAexI,EAAOwI,aAK/B9H,EAAKgI,qBAAuB1I,EAAO0I,sBAAwB,KAC3DhI,EAAKiI,eAAiBjI,EAAK8H,eAC3B9H,EAAKkI,gBAAkB5I,EAAO4I,iBAAmB,KACjDlI,EAAKmI,aAA8C,iBAAxB7I,EAAO6I,aAA4B7I,EAAO6I,aAAe,EAEhFrJ,MAAM8B,QAAQtB,EAAO8I,QAErB9I,EAAO8I,OAAO7E,QAAQ,SAAC8E,EAAY5H,GAC/BT,EAAKoI,OAAOrC,KAAK,IAAI6B,GAA2B5H,EAAMqI,EAAW5M,MAAO4M,EAAW5H,OAASA,WAKhG,IAAK,IAAIA,EAAQ,EAAGA,EAAQT,EAAKmI,aAAc1H,IAC3CT,EAAKsI,2BAnCsB1K,QAwC/B2K,wCACJhN,KAAK6M,OAAO7E,QAAQ,SAAC9H,EAAOgF,GAAU,OAAAhF,EAAMgF,MAAQA,KAGxDjF,sBAAI+M,wBAAJ,WACI,OAAOhN,KAAK6M,OAAOzE,wCAGvB4E,gBAAA,SAAI9H,GACA,OAAOlF,KAAK6M,OAAO3H,IAGvB8H,qBAAA,WACI,OAAOhN,KAAKiN,YAAYjN,KAAK6M,OAAOzE,SAGxC4E,wBAAA,SAAY9H,GAER,IAAIhF,EAAQ,IAAImM,GAA2BrM,KAAMA,KAAKuM,gBAKtD,OAHAvM,KAAK6M,OAAOK,OAAOhI,EAAO,EAAGhF,GAC7BF,KAAKmN,mBAEEjN,GAGX8M,sBAAA,SAAU9H,EAAekI,UAErBC,EAAArN,KAAK6M,QAAOK,gBAAOhI,EAAQkI,EAAM,UAAMpN,KAAK6M,OAAOK,OAAOhI,EAAO,KACjElF,KAAKmN,oBAGTH,wBAAA,SAAY9H,GAERlF,KAAK6M,OAAOK,OAAOhI,EAAO,GAC1BlF,KAAKmN,wBAzERxB,6EAEAA,wEACAA,8DACAA,qEAEAA,sEACAA,4DATsCH,2zBChCvC,WAAsBzH,EAAwC7C,GAA9D,MAEIsD,YAAMT,EAAQ7C,gBAEduD,EAAK6I,cAAgBvJ,EAAOuJ,eAAiB,KAC7C7I,EAAKR,MAA8B,kBAAfQ,EAAKR,OAAsBQ,EAAKR,eATL5B,QAYnDpC,sBAAIsN,2BAAJ,WACI,QAASvN,KAAKiE,WAGlB,SAAYpC,GACR7B,KAAK2B,aAAaC,KAAKC,oCAG3B0L,mBAAA,WACIvN,KAAK6B,SAAW7B,KAAK6B,aAnBxB8J,qEAFkDM,6yBCL1CuB,GAAqC,0BAa9C,WAAYzJ,EAAoC7C,GAAhD,MAEIsD,YAAMT,EAAQ7C,uBAJsBsM,GAMpC/I,EAAKgJ,cAAgD,kBAAzB1J,EAAO0J,eAA8B1J,EAAO0J,uBAVtCpL,YAErCsJ,uEAEAA,4DAJqC4B,ICV7BG,GAAkB,KAKlBC,IAHyB,UACC,YAU1BC,IAHqB,MAHC,OAEE,SAED,QAHD,QAgEtBC,IAvDgC,iBACA,gBACA,gBACA,gBACC,iBACA,iBACA,iBACA,iBAEX,OACY,mBACN,aACK,kBACJ,cACK,mBACR,WACA,WAEI,eACI,mBAEE,qBACN,eAEL,UACK,eACD,cAEJ,UACM,gBACK,qBACJ,iBACL,YACH,SACM,eACD,cACL,SACC,UAEa,uBACF,qBAEV,WAEJ,OACI,WACE,aACD,YAEN,MAEA,MAEE,SA6BvBC,IAXqB,MACa,mBACJ,eACC,gBACJ,YACO,mBACA,mBACG,gBACd,QACD,QASnCC,mCAEWA,iBAAP,SAAsBC,GAClB,OAAOL,GAAwB7H,QAAQkI,IAAU,GAG9CD,iBAAP,SAAsBC,GAClB,OAAOF,GAAwBhI,QAAQkI,IAAU,GAG9CD,iBAAP,SAAsBC,GAClB,OAAOJ,GAAwB9H,QAAQkI,IAAU,GAG9CD,UAAP,SAAeC,GACX,OAAOH,GAAgB/H,QAAQkI,IAAU,GAGtCD,iBAAP,SAAsBC,GAClB,OAAOA,EAAMC,WAAW,aAGrBF,WAAP,SAAgBG,GAEZ,IAAIC,EAAe,SAACC,EAAeC,GAAyB,OAAGD,MAASC,GACpEC,EAAgBX,GAAwBjD,OAAOyD,GAC/CI,EAAgBX,GAAwBlD,OAAOyD,GAC/CK,EAASX,GAAgBnD,OAAOyD,GAChCM,EAAgBX,GAAwBpD,OAAOyD,GAGnD,OAFY,IAAIO,OAAO,2BAA2BJ,gBAA2BE,YAAgBD,gBAA2BE,UAE3GE,KAAKT,i0BC5GtB,WAAsBnK,EAA2C7C,GAAjE,MAEIsD,YAAMT,EAAQ7C,gBAEduD,EAAKmK,aAAe7K,EAAO6K,cAAgBlB,GAC3CjJ,EAAKoK,UAAwC,kBAArB9K,EAAO8K,WAA0B9K,EAAO8K,UAChEpK,EAAKqK,UAAwC,iBAArB/K,EAAO+K,UAAyB/K,EAAO+K,UAAY,KAC3ErK,EAAKsK,UAAwC,iBAArBhL,EAAOgL,UAAyBhL,EAAOgL,UAAY,KAC3EtK,EAAKuK,YAAcjL,EAAOiL,aAAe,GACzCvK,EAAKwK,OAASlL,EAAOkL,QAAU,KAC/BxK,EAAKyK,SAAsC,kBAApBnL,EAAOmL,UAAyBnL,EAAOmL,SAC9DzK,EAAK0K,WAA0C,kBAAtBpL,EAAOoL,YAA2BpL,EAAOoL,WAClE1K,EAAK2K,OAASrL,EAAOqL,QAAU,cAxBmB/M,YAErDsJ,qEACAA,mEACAA,kEACAA,kEACAA,oEACAA,+DACAA,kEACAA,oEACAA,8DAVqDM,IClB1DoD,mCAEWA,eAAP,SAAoBC,GAEhB,MAAoB,iBAATA,IAIAA,aAAgBZ,OAEhBY,EAAKC,WAELhM,MAAM8B,QAAQiK,GAEdA,EAAKE,IAAI,SAAAvL,GAAS,OAAAoL,EAAUI,aAAaxL,KAG7C,MAGJoL,iBAAP,SAAsBC,GAElB,MAAoB,iBAATA,EAEQ,EAAiBrB,WAAW,MAAQ,EAAiByB,SAAS,KAE3D,IAAIhB,OAAO,EAAiBiB,MAAM,EAAGL,EAAKlH,OAAS,IAAMkH,EAEpE/L,MAAM8B,QAAQiK,GAEd,EAAmBE,IAAI,SAAAvL,GAAS,OAAAoL,EAAUO,eAAe3L,KAG7D,MAGJoL,eAAP,SAAoBQ,EAAc5L,GAI9B,MAAwB,iBAAVA,GAFK,mFAE8B0K,KAAK1K,GAAS,IAAI6L,KAAK7L,GAASA,izBCnC5E8L,GAAkC,QAclCC,GAAuC,sBAmChD,WAAYjM,EAAiC7C,GAA7C,MAEIsD,YAAMT,EAAQ7C,wBAfO,eASQ,YAEO6O,GAMpCtL,EAAKwL,OAASlM,EAAOkM,QAAU,KAC/BxL,EAAKyL,UAAYnM,EAAOmM,WAAaF,GACrCvL,EAAK0L,KAAO5M,MAAM8B,QAAQtB,EAAOoM,MAAQpM,EAAOoM,KAAO,KACvD1L,EAAK6K,KAAOvL,EAAOuL,MAAQ,KAC3B7K,EAAK2L,SAAqBpE,IAAfjI,EAAOqM,IAAoBrM,EAAOqM,IAAM,KACnD3L,EAAK4L,SAAqBrE,IAAfjI,EAAOsM,IAAoBtM,EAAOsM,IAAM,KACnD5L,EAAK6L,SAAsC,kBAApBvM,EAAOuM,SAAyBvM,EAAOuM,SAAW,KACzE7L,EAAK8L,QAAUxM,EAAOwM,SAAW,KACjC9L,EAAK2I,KAA8B,iBAAhBrJ,EAAOqJ,KAAoBrJ,EAAOqJ,KAAO,KAExD3I,EAAK0L,OACL1L,EAAK+L,QAAa/L,EAAKpE,oBAhCIgC,QAoCnCpC,sBAAIwQ,0BAAJ,WACI,OAAOzQ,KAAKwQ,yCAGhBvQ,sBAAIwQ,2BAAJ,WACI,OAAOlN,MAAM8B,QAAQrF,KAAKmQ,uCAG9BM,mBAAA,WAEI,IAAIC,EAAYlM,YAAMmM,kBAItB,OAFkB,OAAd3Q,KAAKsP,OAAiBoB,EAAKpB,KAAOD,GAAUI,aAAazP,KAAKsP,OAE3DoB,OAhDV/E,+DACAA,kEAEAA,6DACAA,6DACAA,4DACAA,4DACAA,iEACAA,gEACAA,6DAIAA,4DAfkCiF,IC1BvCC,mCAEWA,yBAAP,SAA8BC,GAE1B,IAAIC,EAAMD,EAAUE,KAAK,SAAAD,GACrB,MChBuC,YDgBhCA,EAAIE,QCf2B,WDeuBF,EAAIE,SAGrE,YAAejF,IAAR+E,EAAoBA,EAAM,MAG9BF,yBAAP,SAA8BzQ,EAAgC8Q,GAE1D,IAAIC,KAeJ,OAbA/Q,EAAM+K,SAASnD,QAAQ,SAAAoJ,GAAY,OAAAA,EAASC,KAAKrJ,QAAQ,SAAA+I,GAErD,GAAI3Q,EAAMC,KAAO0Q,EAAI1Q,GACjB,MAAM,IAAImM,MAAM,eAAepM,EAAMC,+BAGzC,IAAIE,EAAU2Q,EAAa/Q,IAAI4Q,EAAI1Q,IAE/BE,IAAY4Q,EAASG,KAAK,SAAAC,GAAkB,OAAAA,IAAmBhR,KAC/D4Q,EAAS3G,KAAKjK,OAIf4Q,GAGJN,4BAAP,SAAiCO,EAA2CI,GAExE,IAAIC,EAAuBD,EAE3B,OAAOJ,EAASC,KAAK3G,OAAO,SAACgH,EAAuBX,EAAiC7L,GAEjF,IAAI3E,EAAUkR,EAAUtR,IAAI4Q,EAAI1Q,IAEhC,OAAIE,GClDmC,YDkDxB6Q,EAASH,SAEhB/L,EAAQ,GC/CuB,QD+ClBkM,EAASO,aAAuDD,QAI7ExM,EAAQ,GClDsB,ODkDjBkM,EAASO,YAAqDD,KAIxEX,EAAI9M,QAAU1D,EAAQ0D,OAAS8M,EAAIa,SAAWrR,EAAQqR,YAG7DrR,GC9DkC,WD8DvB6Q,EAASH,aAEhB/L,EAAQ,GC5DuB,QD4DlBkM,EAASO,YAAsDD,MAI5ExM,EAAQ,GC/DsB,OD+DjBkM,EAASO,aAAsDD,MAIvEX,EAAI9M,QAAU1D,EAAQ0D,OAAS8M,EAAIa,SAAWrR,EAAQqR,WAKpE,SElCXC,cAwBI,WAAgCC,EACAhS,EACAC,GAFAC,8BAAA8R,EACA9R,mBAAAF,EACAE,uBAAAD,eAvBa,iEAyB7C8R,wBAAA,SAAYE,GAAZ,WAEQC,EAAcD,EAAgC,MAC9CE,EAAcF,EAAgC,MAQlD,GANIE,IAEAjS,KAAKkS,8BACLlS,KAAKmS,+BAGLH,GAAeC,IAEXjS,KAAKI,MAAO,CAYZ,GAVAJ,KAAK6E,cAED7E,KAAKE,QAELF,KAAKO,QAAUP,KAAKE,MAAMC,IAAIH,KAAKI,MAAMC,IACzCL,KAAK4F,cAAc4E,KAAKxK,KAAKO,QAAQ6R,aAAa5K,UAAU,SAAAvD,GAAS,OAAAQ,EAAK4N,sBAAsBpO,OAGpGjE,KAAK4F,cAAc4E,KAAKxK,KAAKI,MAAMmL,gBAAgB/D,UAAU,SAAAvD,GAAS,OAAAQ,EAAK6N,uBAAuBrO,MAE9FjE,KAAKI,iBAAiB6L,GAA8B,CAEpD,IAAI7L,EAAQJ,KAA+C,MAE3DA,KAAK4F,cAAc4E,KAAKpK,EAAMuB,aAAa6F,UAAU,SAAAvD,GAAS,OAAAQ,EAAK8N,oBAAoBtO,MAGvFjE,KAAKI,MAAM+K,SAAS/C,OAAS,GAC7BpI,KAAKwS,wBAMrBX,wBAAA,WAEI7R,KAAKkS,8BACLlS,KAAK6E,eAKT5E,sBAAI4R,iCAAJ,WACI,OAAO7R,KAAKD,kBAAkBO,oBAAoBN,KAAKO,QAASP,KAAKI,wCAGzEH,sBAAI4R,2BAAJ,WACI,MAAyE,iBAA1D7R,WAAiD6L,sCAGpE5L,sBAAI4R,4BAAJ,WACI,MAAmC,iBAArB7R,KAAKI,MAAM4K,uCAG7B/K,sBAAI4R,8BAAJ,WACI,OAAO7R,KAAKI,MAAM0B,OAAS0L,oCAG/BvN,sBAAI4R,6BAAJ,WACI,OAAO7R,KAAKO,QAAQE,yCAGxBR,sBAAI4R,2BAAJ,WACI,OAAO7R,KAAKO,QAAQG,uCAGxBT,sBAAI4R,qCAAJ,WACI,OAAO7R,KAAKI,MAAMO,kBAAoBX,KAAKO,QAAQK,UAAYZ,KAAKa,UAAYb,KAAKc,2CAGzFb,sBAAI4R,6BAAJ,WACI,YAAkC7F,IAA3BhM,KAAKyS,kBAAkCzS,KAAKyS,kBAAoBzS,KAAK0S,qDAGhFzS,sBAAI4R,iCAAJ,WACI,OAAO7R,KAAKI,MAAM0B,OAASwK,GACvBtM,KAAKF,cAAcwC,iBAAiBtC,KAAKI,MAAOJ,KAAKuC,gBAAayJ,mCAG1E/L,sBAAI4R,+BAAJ,WACI,OAAO7R,KAAKI,MAAM0B,OAASwK,GACvBtM,KAAKF,cAAc0C,eAAexC,KAAKI,MAAOJ,KAAKuC,gBAAayJ,mCAGxE6F,qBAAA,SAAS9Q,EAA0CC,EAAsCZ,gBAAAA,EAAiCJ,KAAKI,OAE3H,IAAIa,EAAiBjB,KAAKkB,QAAUlB,KAAKkB,OAAOd,EAAMC,KAAQD,EAAwC,OAEtG,OAAOJ,KAAKF,cAAcqB,SAASF,EAAeF,EAASC,IAGrD6Q,uCAAV,WAAA,WAEQc,EAAgB3S,KAAK2S,cAEzB,GAAsB,OAAlBA,EAAwB,CAExB,IAAIC,EAAmB5S,KAAK8R,yBAAyBe,wBAAwBF,GAE7E3S,KAAK8S,0BAA0BC,QAC/B/S,KAAKgT,aAAehT,KAAK8S,0BAA0BG,gBAAgBL,GAEnE,IAAIM,EAAWlT,KAAKgT,aAAaE,SAEjCA,EAASC,OAASnT,KAAKmT,OACvBD,EAAShT,MAAQF,KAAKE,MACtBgT,EAAShS,OAASlB,KAAKkB,OACvBgS,EAAS9S,MAAQJ,KAAiB,MAE9BA,KAAKuC,YACL2Q,EAAS3Q,UAAYvC,KAAKuC,WAG9BvC,KAAKoT,uBAAuB5I,KAAK0I,EAAS3R,KAAKiG,UAAU,SAACpG,GAAgB,OAAAqD,EAAK4O,OAAOjS,MACtFpB,KAAKoT,uBAAuB5I,KAAK0I,EAASzR,OAAO+F,UAAU,SAACpG,GAAgB,OAAAqD,EAAK/C,SAASN,MAC1FpB,KAAKoT,uBAAuB5I,KAAK0I,EAAS/Q,MAAMqF,UAAU,SAACpG,GAAgB,OAAAqD,EAAK6O,QAAQlS,WAE3D4K,IAAzBkH,EAASjR,aACTjC,KAAKoT,uBAAuB5I,KACxB0I,EAASjR,YAAYuF,UAAU,SAACpG,GAAgB,OAAAqD,EAAK8O,cAAcnS,QAKzEyQ,wCAAV,WAEQ7R,KAAKgT,eAELhT,KAAKoT,uBAAuBpL,QAAQ,SAAArC,GAAgB,OAAAA,EAAad,gBACjE7E,KAAKoT,0BAELpT,KAAKgT,aAAaQ,YAIhB3B,gCAAV,WAAA,WAEQ4B,EAAgB5C,GAAc6C,uBAAuB1T,KAAKI,MAAM+K,UAEpE,GAAsB,OAAlBsI,EAAwB,CAExB,IAAIE,IAEJ3T,KAAK4T,oBAAoBD,GAEzB9C,GAAcgD,uBAAuB7T,KAAKI,MAAOJ,KAAKE,OAAO8H,QAAQ,SAAAzH,GAEjEkE,EAAKmB,cAAc4E,KAAKjK,EAAQ6R,aAAa5K,UAAU,WAAM,OAAA/C,EAAKmP,oBAAoBD,MACtFlP,EAAKmB,cAAc4E,KAAKjK,EAAQuT,cAActM,UAAU,WAAM,OAAA/C,EAAKmP,oBAAoBD,UAKzF9B,0CAAV,SAAwCzQ,EAAaU,GACjD,OAAQV,SAAQL,QAASf,KAAKe,QAASR,QAASP,KAAKO,QAASL,MAAOF,KAAKE,MAAOE,MAAOJ,KAAKI,MAAO0B,SAGxG+P,gCAAA,SAAoB1G,GAEhBnL,KAAKI,MAAMmL,gBAAgB3J,KAAKiP,GAAckD,0BAA0B5I,EAAUnL,KAAKE,SAG3F2R,wBAAA,WAEI7R,KAAK4F,cAAcoC,QAAQ,SAAArC,GAAgB,OAAAA,EAAad,gBACxD7E,KAAK4F,kBAGTiM,kCAAA,SAAsB5N,GAElB,GAAIjE,KAAKI,iBAAiB6L,GAA8B,CAEpD,IAAI7L,EAAQJ,KAA+C,MAEvDI,EAAM6D,QAAUA,GAChB7D,EAAMuB,aAAaC,KAAKqC,KAKpC4N,gCAAA,SAAoB5N,GAEZjE,KAAKO,QAAQ0D,QAAUA,GACvBjE,KAAKO,QAAQyT,SAAS/P,IAI9B4N,mCAAA,SAAuB5N,GACnBA,EAAQjE,KAAKO,QAAQ0T,UAAYjU,KAAKO,QAAQ2T,UAGlDrC,qBAAA,SAASzQ,GAEL,GAAIA,GAAUA,aAAkBC,MAAO,CAEnC,GAAIrB,KAAKI,MAAM0B,OAASiO,GAAiC,CAErD,IAAI3P,EAAQJ,KAA+B,MAE3C,GHxQoC,SGwQhCI,EAAM8P,UAAoD,CAE1D,IAAIiE,EAAoB/S,EAAO6I,QAAU7I,EAAOgT,WAEhDhU,EAAMiU,MAAQF,EAA8B,OAIpDnU,KAAKyB,OAAOD,KAAKxB,KAAKsU,8BAA8BlT,EAAQ2B,EAA4BE,cAEjFsR,EAA0BnT,GAEjCpB,KAAKyB,OAAOD,KAAKJ,GAIjBpB,KAAKyB,OAAOD,KAAKxB,KAAKsU,8BAA8BlT,EAAQ2B,EAA4BE,UAIhG4O,mBAAA,SAAOzQ,GAECmT,EAA0BnT,GAE1BpB,KAAKuB,KAAKC,KAAKJ,IAIfpB,KAAKa,UAAW,EAChBb,KAAKuB,KAAKC,KAAKxB,KAAKsU,8BAA8BlT,EAAQ2B,EAA4BC,SAI9F6O,oBAAA,SAAQzQ,GAEAmT,EAA0BnT,GAE1BpB,KAAKmC,MAAMX,KAAKJ,IAIhBpB,KAAKa,UAAW,EAChBb,KAAKmC,MAAMX,KAAKxB,KAAKsU,8BAA8BlT,EAAQ2B,EAA4BG,UAI/F2O,0BAAA,SAAczQ,GAEV,IAAIY,EAAUhC,KAAyD,YAEnEuU,EAA0BnT,GAE1BY,EAAQR,KAAKJ,GAIbY,EAAQR,KAAKxB,KAAKsU,8BAA8BlT,EAAOa,YAAab,EAAOc,4VCvUvFsS,kFAAsEnS,QAMlEmS,4BAAA,WAAA,WAEIxU,KAAKF,cACA2U,uBAAuBzU,KAAKI,MAAOJ,KAAKuC,WACxCyF,QAAQ,SAAA0M,GAAY,OAAAjQ,EAAKkQ,aAAaD,MAO/CF,yBAAA,SAAaE,GAET,GAA2B,iBAAhBA,EAASE,IAAmB5U,KAAK6U,mBAAmBC,IAAIJ,EAASE,IAAK,CAE7E,IAAIG,EAAW/U,KAAK6U,mBAAmB1U,IAAIuU,EAASE,IAEpD5U,KAAKgV,UAAUD,GAAY/U,KAAKiV,YAAYP,QAvBc7U,aCHX,YAAe,qBAYtE,WAAmBqV,GAAAlV,iBAAAkV,aALMC,GAAqCC,YACjC,gCANhCC,mBACGC,SAAU,2FALaC,gDAStBC,oBACAA,yBACAA,2BACAA,8BCHD,WAAoBC,EAAgCC,GAAhC1V,gBAAAyV,EAAgCzV,cAAA0V,SAEpDC,4BAAA,WAEQ3V,KAAK4V,WACL5V,KAAK0V,SAASG,aAAa7V,KAAKyV,WAAWK,cAAe,KAAM9V,KAAwB,gCAZnGqV,mBACGC,SAAU,2DAHMS,oBAAmBC,kDAOlCR,w0BCcD,WAAsBzR,EAAuC7C,GAA7D,MAEIsD,YAAMT,EAAQ7C,gBAEduD,EAAKwR,OAASlS,EAAOkS,QAAU,KAC/BxR,EAAK2L,IAAMrM,EAAOqM,KAAO,KACzB3L,EAAK4L,IAAMtM,EAAOsM,KAAO,KACzB5L,EAAKuK,YAAcjL,EAAOiL,aAAe,cAdK3M,YAEjDsJ,+DACAA,4DACAA,4DACAA,mEALiDM,4zBCDlD,WAAsBlI,EAAuC7C,GAA7D,MAEIsD,YAAMT,EAAQ7C,gBAEduD,EAAK6L,SAAsC,kBAApBvM,EAAOuM,UAAyBvM,EAAOuM,kBARhBjO,YAEjDsJ,iEAFiDM,+zBCUlD,WAAYlI,GAER/D,KAAKsL,SAAsC,kBAApBvH,EAAOuH,UAAyBvH,EAAOuH,SAC9DtL,KAAKgL,MAAQjH,EAAOiH,OAAS,KAC7BhL,KAAKiE,MAAQF,EAAOE,aAGxBhE,sBAAIiW,wBAAJ,WACI,OAAOlW,KAAKgL,WAGhB,SAASmL,GACLnW,KAAKgL,MAAQmL,mCAGjBD,mBAAA,WACI,OAAOxK,EAAU1L,WApBpB2L,kEACAA,8DACAA,8EAgCD,WAAsB5H,EAA4C7C,GAAlE,MAEIsD,YAAMT,EAAQ7C,8BAEduD,EAAK2R,QAAUrS,EAAOqS,iBAT6B/T,QAY/CgU,sCACJrW,KAAKsW,SAAWC,EAAGvW,KAAKoW,UAG5BnW,sBAAIoW,2BA6BJ,WACI,OAAOrW,KAAKwW,cA9BhB,SAAYJ,GAAZ,eAEQ7S,MAAM8B,QAAQ+Q,IAEdpW,KAAKwW,SAAW,EAA0ChH,IAAI,SAAAiH,GAC1D,OAAO,IAAIP,GAAqBO,KAGpCzW,KAAK0W,kBAEIN,GAAmC,mBAAjBA,EAAQ3O,MAAoD,mBAAtB2O,EAAQ5O,UAEzExH,KAAKsW,SAAW,EAAsDK,QAE9D,SAAAC,GAEA,IAAIR,EAAUQ,EAAcpH,IAAI,SAAAiH,GAAgB,OAAA,IAAIP,GAAqBO,KAIzE,OAFAhS,EAAK+R,SAAWJ,EAETA,kBnBpCF,oImByCbpW,KAAK0W,kDAQbL,gBAAA,SAAII,GACA,OAAOzW,KAAK6W,OAAO7W,KAAKoW,QAAQhO,OAAQqO,IAG5CJ,gBAAA,SAAInR,GACA,OAAOlF,KAAKoW,QAAQlR,IAGxBmR,mBAAA,SAAOnR,EAAeuR,GAElB,IAAIK,EAAS,IAAIZ,GAAkBO,GAKnC,OAHAzW,KAAKoW,QAAQlJ,OAAOhI,EAAO,EAAG4R,GAC9B9W,KAAK0W,iBAEEI,GAGXT,mBAAA,eAAA,oBAAOU,mBAAAA,IAAAC,kBAEHA,EAAQhP,QAAQ,SAAA9C,GAAS,OAAAT,EAAK2R,QAAQlJ,OAAOhI,EAAO,KACpDlF,KAAK0W,sBApER/K,EAAa,sEAFyCM,6yBCxC9CgL,GAAkC,uBAe3C,WAAYlT,EAAqC7C,GAAjD,MAEIsD,YAAMT,EAAQ7C,kCAJsB+V,GAMpCxS,EAAKvE,MAAQqD,MAAM8B,QAAQtB,EAAO7D,OAAS6D,EAAO7D,SAClDuE,EAAKyS,OAASnT,EAAOmT,QAAU,cAZI7U,QAevC8U,gBAAA,SAAIjS,GACA,OAAOlF,KAAKE,MAAMgF,IAGtBiS,gBAAA,SAAIjS,EAAekS,GACfpX,KAAKE,MAAMgF,GAASkS,GAGxBD,gBAAA,SAAIC,GACApX,KAAKE,MAAMsK,KAAK4M,IAGpBD,mBAAA,SAAOjS,EAAekS,GAClBpX,KAAKE,MAAMgN,OAAOhI,EAAO,EAAGkS,IAGhCD,iBAAA,SAAKjS,EAAekI,UAChBC,EAAArN,KAAKE,OAAMgN,gBAAOhI,EAAQkI,EAAM,UAAMpN,KAAKE,MAAMgN,OAAOhI,EAAO,MAGnEiS,mBAAA,SAAOjS,GACHlF,KAAKE,MAAMgN,OAAOhI,EAAO,IAG7BiS,iBAAA,WACI,OAAOnX,KAAKE,MAAMkI,YAtCrBuD,6DACAA,+DAEAA,4DALsCH,4yBCP9B6L,GAA2C,gCAQpD,WAAYtT,EAAqC7C,GAAjD,MACIsD,YAAMT,EAAQ7C,uBAHsBmW,YAJGhV,QAU3CiV,kBAAA,eAAA,oBAAMP,mBAAAA,IAAAC,kBACFA,EAAQhP,QAAQ,SAAA9C,GAAS,OAAAT,EAAKvE,MAAMgF,GAAOrD,SAAU,KAGzDyV,oBAAA,eAAA,oBAAQP,mBAAAA,IAAAC,kBACJA,EAAQhP,QAAQ,SAAA9C,GAAS,OAAAT,EAAKvE,MAAMgF,GAAOrD,SAAU,KAGzDyV,qBAAA,WACItX,KAAKE,MAAM8H,QAAQ,SAAA5H,GAAS,OAAAA,EAAMyB,SAAU,KAGhDyV,uBAAA,WACItX,KAAKE,MAAM8H,QAAQ,SAAA5H,GAAS,OAAAA,EAAMyB,SAAU,SArB/C8J,6DAEAA,4DAJ0CwL,6yBCHlCI,GAAwC,6BAejD,WAAYxT,EAAuC7C,GAAnD,MAEIsD,YAAMT,EAAQ7C,uBAJsBqW,GAMpC9S,EAAKwR,OAAkC,iBAAlBlS,EAAOkS,OAAsBlS,EAAOkS,OAAS,KAClExR,EAAK+S,OAAkC,kBAAlBzT,EAAOyT,QAAuBzT,EAAOyT,gBAZrBnV,YAExCsJ,+DACAA,gEAEAA,4DALwCM,6yBCJhCwL,GAAuC,4BA2BhD,WAAY1T,EAAsC7C,GAAlD,MAEIsD,YAAMT,EAAQ7C,uBAJsBuW,GAMpChT,EAAKoK,UAAwC,kBAArB9K,EAAO8K,WAA0B9K,EAAO8K,UAChEpK,EAAKiT,YAAc3T,EAAO2T,aAAe,KACzCjT,EAAK+S,OAAkC,kBAAlBzT,EAAOyT,QAAuBzT,EAAOyT,OAC1D/S,EAAKwK,OAASlL,EAAOkL,QAAU,KAC/BxK,EAAKyK,SAAsC,kBAApBnL,EAAOmL,UAAyBnL,EAAOmL,SAC9DzK,EAAKkT,WAA0C,iBAAtB5T,EAAO4T,WAA0B5T,EAAO4T,WAAa,KAC9ElT,EAAKmT,YAA4C,iBAAvB7T,EAAO6T,YAA2B7T,EAAO6T,YAAc,KACjFnT,EAAK2K,OAASrL,EAAOqL,QAAU,cAxBK/M,YAEvCsJ,mEACAA,oEACAA,gEACAA,+DACAA,kEACAA,+DACAA,mEACAA,oEAEAA,4DAXuCkM,6yBClB/BC,GAAmC,wBAS5C,WAAY/T,EAAkC7C,GAA9C,MAEIsD,YAAMT,EAAQ7C,uBAJsB4W,YAFJzV,YAEnCsJ,4DAFmCiF,6yBCL3BmH,GAAwC,6BAyBjD,WAAYhU,EAAsC7C,GAAlD,MAEIsD,YAAMT,EAAQ7C,uBAJsB6W,GAMpCtT,EAAKwL,OAAS1M,MAAM8B,QAAQtB,EAAOkM,QAAUlM,EAAOkM,OAAS,KAC7DxL,EAAKuT,WAA0C,kBAAtBjU,EAAOiU,YAA2BjU,EAAOiU,WAClEvT,EAAKwT,QAAoC,iBAAnBlU,EAAOkU,QAAuBlU,EAAOkU,QAAU,KACrExT,EAAKyT,QAAoC,iBAAnBnU,EAAOmU,QAAuBnU,EAAOmU,QAAU,KACrEzT,EAAK0T,UAAYpU,EAAOoU,WAAa,KACrC1T,EAAK2T,aAA8C,kBAAxBrU,EAAOqU,cAA6BrU,EAAOqU,aACtE3T,EAAK4T,IAAMtU,EAAOsU,KAAO,cAtBWhW,YAEvCsJ,+DACAA,oEACAA,gEACAA,gEACAA,kEACAA,sEACAA,4DAEAA,4DAVuC2M,6yBCb/BC,GAAwC,6BAajD,WAAYxU,EAAyC7C,GAArD,MAEIsD,YAAMT,EAAQ7C,uBAJsBqX,GAMpC9T,EAAKyS,OAASnT,EAAOmT,QAAU,cAVQ7U,QAa3CmW,mBAAA,SAAOtT,GACHlF,KAAK2B,aAAaC,KAAK5B,KAAKG,IAAI+E,GAAOjB,YAZ1C0H,+DAEAA,4DAJ0C0K,6yBCPlCoC,GAAmC,wBAa5C,WAAY1U,EAAkC7C,GAA9C,MAEIsD,YAAMT,EAAQ7C,uBAJsBuX,GAMpChU,EAAK2L,IAA4B,iBAAfrM,EAAOqM,IAAmBrM,EAAOqM,IAAM,YAVzB/N,YAEnCsJ,4DAEAA,4DAJmCM,6yBCP3ByM,GAAmC,wBAqB5C,WAAY3U,EAAqC7C,GAAjD,MAEIsD,YAAMT,EAAQ7C,uBAJsBwX,GAMpCjU,EAAKkU,WAA0C,kBAAtB5U,EAAO4U,YAA2B5U,EAAO4U,WAClElU,EAAK6L,SAAsC,kBAApBvM,EAAOuM,UAAyBvM,EAAOuM,SAC9D7L,EAAKuK,YAAcjL,EAAOiL,aAAe,GACzCvK,EAAKwK,OAASlL,EAAOkL,QAAU,KAC/BxK,EAAK2K,OAASrL,EAAOqL,QAAU,cAlBI/M,QAqBvCuW,mBAAA,eAAA,oBAAO7B,mBAAAA,IAAAC,kBAEH,IAAI/S,EAAQjE,KAAKsQ,SAAW0G,EAAQxH,IAAI,SAAAtK,GAAS,OAAAT,EAAKtE,IAAI+E,GAAOjB,QAASjE,KAAKG,IAAI6W,EAAQ,IAAI/S,MAE/FjE,KAAK2B,aAAaC,KAAKqC,QAvB1B0H,oEACAA,kEACAA,oEACAA,+DACAA,+DAEAA,4DARsC0K,6yBCX9BwC,GAAmC,wBAmB5C,WAAY9U,EAAkC7C,GAA9C,MAEIsD,YAAMT,EAAQ7C,uBAJsB2X,GAMpCpU,EAAK2L,IAA4B,iBAAfrM,EAAOqM,IAAmBrM,EAAOqM,IAAM,GACzD3L,EAAK4L,IAA4B,iBAAftM,EAAOsM,IAAmBtM,EAAOsM,IAAM,EACzD5L,EAAK2I,KAA8B,iBAAhBrJ,EAAOqJ,KAAoBrJ,EAAOqJ,KAAO,EAC5D3I,EAAKqU,SAAsC,kBAApB/U,EAAO+U,UAAyB/U,EAAO+U,kBAhB9BzW,YAEnCsJ,4DACAA,4DACAA,6DACAA,kEAEAA,4DAPmCM,6yBCV3B8M,GAAmC,wBAe5C,WAAYhV,EAAkC7C,GAA9C,MAEIsD,YAAMT,EAAQ7C,uBAJsB6X,GAMpCtU,EAAKuU,SAAWjV,EAAOiV,UAAY,KACnCvU,EAAKwU,QAAUlV,EAAOkV,SAAW,cAZD5W,YAEnCsJ,iEACAA,gEAEAA,4DALmC4B,6yBCR3B2L,GAAqC,WAGrCC,GAAkC,sBAiB3C,WAAYpV,EAAoC7C,GAAhD,MAEIsD,YAAMT,EAAQ7C,uBAJsBgY,GAMpCzU,EAAK2U,KAA8B,iBAAhBrV,EAAOqV,KAAoBrV,EAAOqV,KAAO,GAC5D3U,EAAK4U,KAA8B,iBAAhBtV,EAAOsV,KAAoBtV,EAAOsV,KAAO,EAC5D5U,EAAK6U,KAAOvV,EAAOuV,MAAQH,YAdO9W,YAErCsJ,6DACAA,6DACAA,6DAEAA,4DANqCiF,6yBCZ7B2I,GAAuC,4BAehD,WAAYxV,EAAsC7C,GAAlD,MAEIsD,YAAMT,EAAQ7C,uBAJsBqY,GAMpC9U,EAAK+U,SAAsC,kBAApBzV,EAAOyV,UAAyBzV,EAAOyV,SAC9D/U,EAAKgV,YAA4C,kBAAvB1V,EAAO0V,aAA4B1V,EAAO0V,qBAZhCpX,YAEvCsJ,kEACAA,qEAEAA,4DALuCkM,ICW/B6B,GAAqB,IAAIC,iBAA8B,oCAKhE,WAAuDC,EACMC,EACDH,GAFL1Z,mBAAA4Z,EACM5Z,yBAAA6Z,EACD7Z,wBAAA0Z,SAGpDI,oCAAeC,EAAuBC,EACvBC,GAEnB,IAAIC,EAgBJ,gBAnB0CF,qBACvBC,EAAmCja,KAAK4Z,eAIvDO,aAAW1X,eAAesX,GAE1BG,EAAeC,aAAmBJ,GAI9B/Z,KAAK0Z,oBAAsB1Z,KAAK0Z,mBAAmB5E,IAAIiF,GACvDG,EAAcla,KAAK0Z,mBAAmBvZ,IAAI4Z,GAEnCE,IACPC,EAAcD,EAAgBjJ,KAAK,SAAAkJ,GAAe,OAAAA,EAAYxV,OAASqV,UAI3D/N,IAAhBkO,EACA,MAAM,IAAI1N,MAAM,cAAcuN,yFAGlC,OAAsB,OAAlBC,EACO,EAAkCA,MAOzCF,qCAAgBM,EACAH,2BAAAA,EAAmCja,KAAK4Z,eAE5D,IAAIS,KAmBJ,OAjBID,GAAgD,iBAArBA,IAE3BC,EAAepa,OAAOqa,KAAKF,GAAkB5K,IAAI,SAAA+K,GAE7C,IAAIC,EAAuBJ,EAAiBG,GAE5C,GAAI9V,EAAKgW,sBAAsBD,GAAuB,CAElD,IAAIE,IAEJ,OAAOjW,EAAKkW,eAAeD,EAAWhW,KAAMgW,EAAWlR,KAAMyQ,GAGjE,OAAOxV,EAAKkW,eAAeJ,EAAoBC,EAAsBP,MAItEI,GAIHP,6CAAwBpF,EAAkBtU,EAAgCiG,GAE9E,oBAF8EA,QAEvEqO,EAASkG,QAAQ,oBAAqB,SAACC,EAAgBC,GAE1D,IAAIC,EAAsB3a,EACtB4a,EAAuBF,EAQ3B,OANIA,EAAWhV,QAAQ,eAAiB,GAAKO,IAEzC0U,EAAiB1U,EACjB2U,EAAeF,EAAWF,QAAQ,aAAc,KAG7CG,EAAeC,GAAgBD,EAAeC,GAAgB,QAK7ElB,yBAAA,SAAaC,EAAuBC,GAChC,oBADgCA,QACzBha,KAAK2a,eAAeZ,EAAeC,IAI9CF,8BAAA,SAAkBC,EAAuBC,GACrC,oBADqCA,QAC9Bha,KAAK2a,eAAeZ,EAAeC,EAAeha,KAAK6Z,sBAIlEC,0BAAA,SAAcM,GACV,OAAOpa,KAAKib,gBAAgBb,IAIhCN,+BAAA,SAAmBoB,GACf,OAAOlb,KAAKib,gBAAgBC,EAAuBlb,KAAK6Z,sBAI5DC,6BAAA,SAAiBM,EAAkD7Z,EAClDH,GAEbA,EAAMiL,WAAa+O,EAEM,OAArBA,EAEA7Z,EAAQ4a,kBAGR5a,EAAQ6a,cAAcpb,KAAKqb,cAAcjB,KAKjDN,kCAAA,SAAsBoB,EAAuD3a,EACvDH,GAElBA,EAAMyK,gBAAkBqQ,EAEM,OAA1BA,EAEA3a,EAAQ+a,uBAGR/a,EAAQgb,mBAAmBvb,KAAKwb,mBAAmBN,KAK3DpB,gCAAA,SAAoBvZ,EAA0BH,GAA9C,WAEQqb,KAEJ,GAAmC,iBAAxBrb,EAAM0K,eAAsD,OAAxB1K,EAAM0K,cAAwB,CAEzE,IAAI4Q,EAAiBtb,EAA8C,cAEnEH,OAAOqa,KAAK/Z,EAAQuE,YAAckD,QAAQ,SAAA2T,GAEtC,IAAIC,EAAaD,EAMjB,GAJ2B,cAAvBA,GAA6D,cAAvBA,IACtCC,EAAaA,EAAWhB,QAAQ,SAAU,WAG1Cc,EAAejZ,eAAemZ,GAAa,CAE3C,IAAIC,EAAkBtb,EAAQub,SAASH,GACnCI,EAAkBL,EAAeE,GAErCH,EAASjR,KAAK/F,EAAKuX,wBAAwBD,EAAiB3b,EAAOyb,OAK/E,OAAOJ,GAIX3B,uBAAA,SAAW7V,GACP,MAAwB,iBAAVA,IAAuE,KAAhD,OAAQ,SAAU,UAAU6B,QAAQ7B,IAI7E6V,kCAAA,SAAsB7V,GAElB,OAAc,OAAVA,GAAmC,iBAAVA,IAClBA,EAAMxB,eAAe,SAAWwB,EAAMxB,eAAe,8BA3KvEwZ,gFAGgBC,kBAAYC,eAAOvC,kDACnBsC,kBAAYC,eAAOtC,gCACgDuC,sBAAnEF,kBAAYC,eAAOzC,4BCuBhC,WAAoB3Z,GAAAC,uBAAAD,SAGZsc,kDAA6BjC,EACAc,EACA9P,GAEjC,oBAJiCgP,qBACAc,qBACA9P,SAI7BP,gBAA2C,OAA1BqQ,EAAiClb,KAAKD,kBAAkByb,mBAAmBN,GAAyB,KAErH7P,WAAiC,OAArB+O,EAA4Bpa,KAAKD,kBAAkBsb,cAAcjB,GAAoB,KAEjGhP,SAAuB,OAAbA,GAAqBpL,KAAKD,kBAAkBuc,WAAWlR,GAAYA,EAAW,WAKhGiR,4BAAA,SAAgBE,GAMZ,IAJA,IAAIpL,KACAiF,EAAUpW,KAAKwc,6BAA6BD,EAAelR,WAAYkR,EAAe1R,gBAClF0R,EAAenR,UAEdlG,EAAQ,EAAGA,EAAQqX,EAAeE,KAAMvX,IAAS,CAEtD,IAAIwX,EAAaH,EAAepc,IAAI+E,GAChCyX,EAAe3c,KAAKwc,6BAA6BD,EAAe5P,gBAC5D4P,EAAe9P,qBAAsB8P,EAAenR,UAE5D+F,EAAS3G,KAAKxK,KAAK4c,gBAAgBF,EAAWxc,MAAOyc,EAAcD,IAGvE,OAAO,IAAIG,YAAU1L,EAAUiF,IAInCiG,4BAAA,SAAgBS,EAAsC1G,EACtCrQ,GADhB,wBAAsDqQ,qBACtCrQ,QAEZ,IAAIoL,KAkCJ,OAhCA2L,EAAU9U,QAAQ,SAAA5H,GAId,OAFAA,EAAM2F,OAASA,EAEP3F,EAAM0B,MAEV,KAAKwK,GAED6E,EAAS/Q,EAAMC,IAAMoE,EAAKsY,mBAC1B,MAEJ,KAAK9F,GACL,KAAKI,GAED,IAAIqF,IACAC,EAAelY,EAAK+X,6BAA6BE,EAAWrR,WACxDqR,EAAW7R,gBAAiB6R,EAAWtR,UAE/C+F,EAAS/Q,EAAMC,IAAMoE,EAAKmY,gBAAgBF,EAAWxc,MAAOyc,EAAcD,GAC1E,MAEJ,QAEI,IAAItF,IACA4F,GAAgB/Y,MAAOmT,EAAanT,MAAOqH,SAAU8L,EAAa9L,UAClE2R,EAAiBxY,EAAK+X,6BAA6BpF,EAAa/L,WAC5D+L,EAAavM,gBAAiBuM,EAAahM,UAEnD+F,EAAS/Q,EAAMC,IAAM,IAAI6c,cAAYF,EAAcC,MAIxD,IAAIE,YAAUhM,EAAUiF,IAInCiG,2BAAA,SAAejc,GAEX,OAAOA,aAAiBiM,GAA6BjM,EAAM8E,MAAMqK,WAAa,EAAmClP,IAIrHgc,oBAAA,SAAQjc,GAKJ,IAHA,IAAIgd,GAAQpd,KAAKqd,eAAejd,IAC5B2F,EAAS3F,EAAM2F,OAEZA,GAEHqX,EAAKE,QAAQtd,KAAKqd,eAAetX,IACjCA,EAASA,EAAOA,OAGpB,OAAOqX,GAIXf,gCAAA,SAAoB5K,EAAsBqL,OAA6B,aAAA/F,mBAAAA,IAAAwG,oBAEnE,GAAIT,aAAqB3F,GAErBnX,KAAKwd,6BAALxd,MAA4B8c,EAAUL,OAAQhL,EAAWqL,UAAcS,QAEpE,CAEH,IAAIE,IACJzd,KAAKwd,6BAALxd,MAA4Byd,EAAWrV,OAAQqJ,EAAWgM,UAAeF,MAKjFlB,iCAAA,SAAqBnX,EAAekI,EAAc0P,GAE9C,GAAIA,aAAqB3F,GAErB2F,EAAUY,KAAKxY,EAAOkI,OAEnB,CAEH,IAAIqQ,IACJA,EAAWvQ,aAAXuQ,GAAkBvY,EAAQkI,EAAM,UAAMqQ,EAAWvQ,OAAOhI,EAAO,OAKvEmX,mCAAA,SAAuBnX,EAAeuM,EAAsBqL,OACrC,aAAA/F,mBAAAA,IAAAwG,oBAEnB,IAAIxX,EAAS+W,aAAqB3F,GAAwB2F,EAAY,KAClE3L,EAAWnR,KAAK4c,gBAAgBW,EAAQ,KAAMxX,GAAQoL,SAE1DlR,OAAOqa,KAAKnJ,GAAUnJ,QAAQ,SAAC2V,EAAaC,GAExC,IAAIxG,EAAemG,EAAOK,GAEtBd,aAAqB3F,GACrB2F,EAAUjG,OAAO3R,EAAOkS,GAGxB,EAAyClK,OAAOhI,EAAO,EAAGkS,GAG9D3F,EAAUoM,WAAWF,EAAaxM,EAASwM,OAKnDtB,mCAAA,SAAuBnX,EAAeuM,EAAsBqL,GAEpDA,aAAqB3F,IAErB1F,EAAUqM,cAAchB,EAAU3c,IAAI+E,GAAO7E,IAC7Cyc,EAAUiB,OAAO7Y,KAIjBuM,EAAUqM,cAAchB,EAAU5X,GAAO7E,IACzC,EAAyC6M,OAAOhI,EAAO,KAK/DmX,8BAAA,SAAkB2B,EAAsBzB,GAEpC,IAAIG,EAAaH,EAAexP,WAEhCiR,EAAUxT,KAAKxK,KAAK4c,gBAAgBF,EAAWxc,MAAO,KAAMwc,KAIhEL,iCAAA,SAAqBnX,EAAe8Y,EAAsBzB,GAEtD,IAAIG,EAAaH,EAAetP,YAAY/H,GAE5C8Y,EAAUnH,OAAO3R,EAAOlF,KAAK4c,gBAAgBF,EAAWxc,MAAO,KAAMwc,KAIzEL,+BAAA,SAAmBnX,EAAekI,EAAc4Q,EAAsBzB,GAElE,IAAI0B,EAAW/Y,EAAQkI,EACnB8Q,EAAS9Q,GAAQ,EAErB,KAAKlI,GAAS,GAAKA,EAAQqX,EAAeE,MAAUwB,GAAY,GAAKA,EAAW1B,EAAeE,MAyB3F,MAAM,IAAIjQ,MAAM,kFArBhB,IAFA,IAAI2R,KAEKnV,EAAIkV,EAAShZ,EAAQ+Y,EAAUjV,IAAMkV,EAASD,EAAW/Y,GAAQ8D,IACtEmV,EAAa3T,KAAKwT,EAAUI,GAAGpV,IAGnCmV,EAAanW,QAAQ,SAACqW,EAAaT,GAE/B,IAAIU,EAGAA,EADAJ,EACmB,IAARN,EAAYK,EAAW/Y,EAAQ0Y,EAAM,EAGrCA,IAAQO,EAAa/V,OAAS,EAAI6V,EAAWA,EAAWL,EAAM,EAG7EI,EAAUO,WAAWD,EAAUD,KAGnC9B,EAAeiC,UAAUtZ,EAAOkI,IAQxCiP,iCAAA,SAAqBnX,EAAe8Y,EAAsBzB,GAEtDyB,EAAUS,SAASvZ,GACnBqX,EAAemC,YAAYxZ,IAI/BmX,2BAAA,SAAe2B,EAAsBzB,GAEjC,KAAOyB,EAAU5V,OAAS,GACtBpI,KAAK2e,qBAAqB,EAAGX,EAAWzB,IAKhDF,qBAAA,SAAShc,EAAYyc,GAEjB,IAAIrT,EAAS,KACTmV,EAAa,SAACve,EAAYqc,GAEtB,IAAyB,QAAAmC,IAAA9H,WAAAA,KAApB,IAAIK,OAEL,GAAIA,EAAa/W,KAAOA,EAAI,CACxBoJ,EAAS2N,EACT,MAGAA,aAAwBD,IACxByH,EAAWve,EAAI,EAAwCH,SAOvE,OAFA0e,EAAWve,EAAIyc,GAERrT,GAIX4S,qBAAA,SAAS3L,GAAT,WAGQoM,KAmGJ,OApGoC,iBAATpM,EAAoBoO,KAAKC,MAAMrO,EAAMrB,GAAU2P,cAAgBtO,GAG5E1I,QAAQ,SAAC5H,GAEnB,IAAIc,EAASd,EAAMc,QAAUd,EAAM6e,KAAO,KAE1C,OAAQ7e,EAAM0B,MAEV,KAAKwK,GACD,IAAI4S,IAEA3b,MAAM8B,QAAQ6Z,EAAerS,SAE7BqS,EAAerS,OAAO7E,QAAQ,SAAC0U,GAC3BA,EAAWxc,MAAQuE,EAAK0a,SAASzC,EAAWxc,SAIpDgf,EAAe3S,aAAe,WAC1B,OAAO9H,EAAK0a,SAASD,EAAexS,iBAGxCoQ,EAAUtS,KAAK,IAAIwC,GAAsB5M,EAAOc,IAChD,MAEJ,KAAKsM,GACDsP,EAAUtS,KAAK,IAAI4U,GAAqBhf,EAAOc,IAC/C,MAEJ,KAAKmW,GACDjX,EAAMF,MAAQuE,EAAK0a,SAAS/e,EAAMF,OAClC4c,EAAUtS,KAAK,IAAI8M,GAA0BlX,EAAOc,IACpD,MAEJ,KAAKqW,GACDuF,EAAUtS,KAAK,IAAI6U,GAAwBjf,EAAOc,IAClD,MAEJ,KAAKuW,GACDqF,EAAUtS,KAAK,IAAI8U,GAAuBlf,EAAOc,IACjD,MAEJ,KAAK4W,GACDgF,EAAUtS,KAAK,IAAI+U,GAAmBnf,EAAOc,IAC7C,MAEJ,KAAK6W,GACD3X,EAAM6D,MAAQ,KACd6Y,EAAUtS,KAAK,IAAIgV,GAAuBpf,EAAOc,IACjD,MAEJ,KAAK+V,GACD7W,EAAMF,MAAQuE,EAAK0a,SAAS/e,EAAMF,OAClC4c,EAAUtS,KAAK,IAAI2M,GAAsB/W,EAAOc,IAChD,MAEJ,KAAK6O,GACD,IAAI0P,IAEoB,OAApBA,EAAWnQ,OACXmQ,EAAWnQ,KAAOD,GAAUO,eAAe6P,EAAyB,OAGxE3C,EAAUtS,KAAK,IAAIiG,GAAkBrQ,EAAOc,IAC5C,MAEJ,KAAKqX,GACDuE,EAAUtS,KAAK,IAAIgO,GAAuBpY,EAAOc,IACjD,MAEJ,KAAKuX,GACDqE,EAAUtS,KAAK,IAAIkV,GAAmBtf,EAAOc,IAC7C,MAEJ,KAAKwX,GACDoE,EAAUtS,KAAK,IAAIoO,GAAmBxY,EAAOc,IAC7C,MAEJ,KAAK2X,GACDiE,EAAUtS,KAAK,IAAImV,GAAmBvf,EAAOc,IAC7C,MAEJ,KAAK6X,GACD+D,EAAUtS,KAAK,IAAIoV,GAAmBxf,EAAOc,IAC7C,MAEJ,KAAKgY,GACD4D,EAAUtS,KAAK,IAAIqV,GAAqBzf,EAAOc,IAC/C,MAEJ,KAAKqY,GACDuD,EAAUtS,KAAK,IAAIsV,GAAuB1f,EAAOc,IACjD,MAEJ,QACI,MAAM,IAAIsL,MAAM,mEAAmEpM,EAAMC,WAI9Fyc,uBAvWdb,wDAPQnC,WCvBIiG,GAA8B,IAAIpG,iBAAwC,6CAKnF,WAA8EoG,GAAA/f,iCAAA+f,EAC1E/f,KAAK+f,qCAGTC,qBAAA,SAAS3f,EAAYyC,GAEjB,GAAmB,OAAfA,GAA6C,iBAAfA,EAE9B,IAAgB,QAAAuK,EAAApN,OAAOqa,KAAKxX,GAAZiU,WAAAA,KAAX,IAAI7M,OAEL,GAAIA,IAAQ7J,EACR,OAAOyC,EAAWoH,GAK9B,OAAO,MAGX8V,mCAAA,SAAuB5f,EAAgCmC,GAEnD,IAAM0d,EAAkE,SAACvL,GACrE,OAAOA,EAASwL,UAAY9f,EAAMC,IAAMqU,EAASyL,YAAc/f,EAAM0B,MAGzE,OAAIS,aAAqB6d,YACd7d,EAAU8d,OAAOJ,GAEjB1c,MAAM8B,QAAQ9C,GACdA,EAAU8d,OAAOJ,OAMhCD,+BAAA,SAAmB5f,EAAgCmC,EAAwC+d,GAEvF,OAAOtgB,KAAKyU,uBAAuBrU,EAAOmC,GACrCyO,KAAK,SAAA0D,GAAY,OAAgB,OAAhBA,EAASE,IAAeF,EAAS6L,QAAUD,KAGrEN,6BAAA,SAAiB5f,EAAgCmC,GAC7C,OAAOvC,KAAKwgB,mBAAmBpgB,EAAOmC,EAAW4S,GAAqCsL,QAG1FT,2BAAA,SAAe5f,EAAgCmC,GAC3C,OAAOvC,KAAKwgB,mBAAmBpgB,EAAOmC,EAAW4S,GAAqCC,MAG1F4K,qBAAA,SAAS9e,EAAyCH,EAA0CC,GAExF,GAAe,OAAXE,GAAmBA,EAAOuB,eAAe1B,GAAU,CAEnD,IAAIgD,EAAS7C,EAAOH,GAEpB,GAAIgD,EAAOtB,eAAezB,GACtB,OAAO+C,EAAO/C,GAItB,MAAO,IAGXgf,mCAAA,SAAuB5f,GAEnB,OAAIJ,KAAK+f,4BACE/f,KAAK+f,4BAA4B3f,GAGrC,0BAxEd6b,iFAGgBE,eAAO4D,WAA8B7D,wDCA3CwE,UAAP,WAEI,OAEIC,SAAUD,EAEVE,WACIvE,GACA2D,GACAlG,0BAzBf+G,kBACGC,SACIC,eACAC,uBAEJC,cACItL,GACAuL,IAEJC,SACIxL,GACAuL,oyC1Bb6C,+CACD,wDAEU,yDACT,+CACD,+CACC,iDACC,oDACE,mDACH,iDACC,+CACH,uFAEC,6CACD,6CACC,uaqBhBL,kLnBNI,+CACD,+CACC,+CACD,+CAEC,2CACD,yKLNlB,oDAGM,oCACC,8DAIJ,6BACA,+BACE,8BACH,6BACE,qEAMS,iDACA,gDACA,gDACA,iDACC,kDACA,kDACA,kDACA,uCAEX,yCACY,+CACN,8CACK,+CACJ,gDACK,6CACR,qCACA,yCAEI,iDACI,uDAEE,mDACN,wCAEL,wCACK,4CACD,uCAEJ,yCACM,oDACK,qDACJ,4CACL,oCACH,uCACM,4CACD,sCACL,kCACC,gDAEa,2DACF,+CAEV,iCAEJ,iCACI,uCACE,wCACD,iCAEN,2BAEA,6BAEE,kDAkBF,wCACa,iDACJ,8CACC,2CACJ,8CACO,qDACA,wDACG,uCACd,8BACD"}